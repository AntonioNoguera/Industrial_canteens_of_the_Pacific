'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión de runtime:4.0.30319.42000
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("Comedor_PacificoDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class Comedor_PacificoDataSet
    Inherits Global.System.Data.DataSet
    
    Private tableApuntes As ApuntesDataTable
    
    Private tableDistribuidores As DistribuidoresDataTable
    
    Private tableRegCenas As RegCenasDataTable
    
    Private tableRegComidas As RegComidasDataTable
    
    Private tableRegDesayunos As RegDesayunosDataTable
    
    Private tableRegistrosG As RegistrosGDataTable
    
    Private tableRegistrosGV As RegistrosGVDataTable
    
    Private tableRegistrosTotales As RegistrosTotalesDataTable
    
    Private tableRegistrosV As RegistrosVDataTable
    
    Private tableUsuariosComedor As UsuariosComedorDataTable
    
    Private relationFK_Apuntes_UsuariosComedor As Global.System.Data.DataRelation
    
    Private relationFK_Distribuidores_UsuariosComedor As Global.System.Data.DataRelation
    
    Private relationFK_RegCenas_UsuariosComedor As Global.System.Data.DataRelation
    
    Private relationFK_RegComidas_UsuariosComedor As Global.System.Data.DataRelation
    
    Private relationFK_RegDesayunos_UsuariosComedor As Global.System.Data.DataRelation
    
    Private relationFK_RegistrosGa_RegistrosGV As Global.System.Data.DataRelation
    
    Private relationFK_RegistrosGa_UsuariosComedor As Global.System.Data.DataRelation
    
    Private relationFK_RegistrosV_RegistrosGV As Global.System.Data.DataRelation
    
    Private relationFK_RegistrosV_UsuariosComedor As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Apuntes")) Is Nothing) Then
                MyBase.Tables.Add(New ApuntesDataTable(ds.Tables("Apuntes")))
            End If
            If (Not (ds.Tables("Distribuidores")) Is Nothing) Then
                MyBase.Tables.Add(New DistribuidoresDataTable(ds.Tables("Distribuidores")))
            End If
            If (Not (ds.Tables("RegCenas")) Is Nothing) Then
                MyBase.Tables.Add(New RegCenasDataTable(ds.Tables("RegCenas")))
            End If
            If (Not (ds.Tables("RegComidas")) Is Nothing) Then
                MyBase.Tables.Add(New RegComidasDataTable(ds.Tables("RegComidas")))
            End If
            If (Not (ds.Tables("RegDesayunos")) Is Nothing) Then
                MyBase.Tables.Add(New RegDesayunosDataTable(ds.Tables("RegDesayunos")))
            End If
            If (Not (ds.Tables("RegistrosG")) Is Nothing) Then
                MyBase.Tables.Add(New RegistrosGDataTable(ds.Tables("RegistrosG")))
            End If
            If (Not (ds.Tables("RegistrosGV")) Is Nothing) Then
                MyBase.Tables.Add(New RegistrosGVDataTable(ds.Tables("RegistrosGV")))
            End If
            If (Not (ds.Tables("RegistrosTotales")) Is Nothing) Then
                MyBase.Tables.Add(New RegistrosTotalesDataTable(ds.Tables("RegistrosTotales")))
            End If
            If (Not (ds.Tables("RegistrosV")) Is Nothing) Then
                MyBase.Tables.Add(New RegistrosVDataTable(ds.Tables("RegistrosV")))
            End If
            If (Not (ds.Tables("UsuariosComedor")) Is Nothing) Then
                MyBase.Tables.Add(New UsuariosComedorDataTable(ds.Tables("UsuariosComedor")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Apuntes() As ApuntesDataTable
        Get
            Return Me.tableApuntes
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Distribuidores() As DistribuidoresDataTable
        Get
            Return Me.tableDistribuidores
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RegCenas() As RegCenasDataTable
        Get
            Return Me.tableRegCenas
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RegComidas() As RegComidasDataTable
        Get
            Return Me.tableRegComidas
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RegDesayunos() As RegDesayunosDataTable
        Get
            Return Me.tableRegDesayunos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RegistrosG() As RegistrosGDataTable
        Get
            Return Me.tableRegistrosG
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RegistrosGV() As RegistrosGVDataTable
        Get
            Return Me.tableRegistrosGV
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RegistrosTotales() As RegistrosTotalesDataTable
        Get
            Return Me.tableRegistrosTotales
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RegistrosV() As RegistrosVDataTable
        Get
            Return Me.tableRegistrosV
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property UsuariosComedor() As UsuariosComedorDataTable
        Get
            Return Me.tableUsuariosComedor
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As Comedor_PacificoDataSet = CType(MyBase.Clone,Comedor_PacificoDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("Apuntes")) Is Nothing) Then
                MyBase.Tables.Add(New ApuntesDataTable(ds.Tables("Apuntes")))
            End If
            If (Not (ds.Tables("Distribuidores")) Is Nothing) Then
                MyBase.Tables.Add(New DistribuidoresDataTable(ds.Tables("Distribuidores")))
            End If
            If (Not (ds.Tables("RegCenas")) Is Nothing) Then
                MyBase.Tables.Add(New RegCenasDataTable(ds.Tables("RegCenas")))
            End If
            If (Not (ds.Tables("RegComidas")) Is Nothing) Then
                MyBase.Tables.Add(New RegComidasDataTable(ds.Tables("RegComidas")))
            End If
            If (Not (ds.Tables("RegDesayunos")) Is Nothing) Then
                MyBase.Tables.Add(New RegDesayunosDataTable(ds.Tables("RegDesayunos")))
            End If
            If (Not (ds.Tables("RegistrosG")) Is Nothing) Then
                MyBase.Tables.Add(New RegistrosGDataTable(ds.Tables("RegistrosG")))
            End If
            If (Not (ds.Tables("RegistrosGV")) Is Nothing) Then
                MyBase.Tables.Add(New RegistrosGVDataTable(ds.Tables("RegistrosGV")))
            End If
            If (Not (ds.Tables("RegistrosTotales")) Is Nothing) Then
                MyBase.Tables.Add(New RegistrosTotalesDataTable(ds.Tables("RegistrosTotales")))
            End If
            If (Not (ds.Tables("RegistrosV")) Is Nothing) Then
                MyBase.Tables.Add(New RegistrosVDataTable(ds.Tables("RegistrosV")))
            End If
            If (Not (ds.Tables("UsuariosComedor")) Is Nothing) Then
                MyBase.Tables.Add(New UsuariosComedorDataTable(ds.Tables("UsuariosComedor")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableApuntes = CType(MyBase.Tables("Apuntes"),ApuntesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableApuntes) Is Nothing) Then
                Me.tableApuntes.InitVars
            End If
        End If
        Me.tableDistribuidores = CType(MyBase.Tables("Distribuidores"),DistribuidoresDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDistribuidores) Is Nothing) Then
                Me.tableDistribuidores.InitVars
            End If
        End If
        Me.tableRegCenas = CType(MyBase.Tables("RegCenas"),RegCenasDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRegCenas) Is Nothing) Then
                Me.tableRegCenas.InitVars
            End If
        End If
        Me.tableRegComidas = CType(MyBase.Tables("RegComidas"),RegComidasDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRegComidas) Is Nothing) Then
                Me.tableRegComidas.InitVars
            End If
        End If
        Me.tableRegDesayunos = CType(MyBase.Tables("RegDesayunos"),RegDesayunosDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRegDesayunos) Is Nothing) Then
                Me.tableRegDesayunos.InitVars
            End If
        End If
        Me.tableRegistrosG = CType(MyBase.Tables("RegistrosG"),RegistrosGDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRegistrosG) Is Nothing) Then
                Me.tableRegistrosG.InitVars
            End If
        End If
        Me.tableRegistrosGV = CType(MyBase.Tables("RegistrosGV"),RegistrosGVDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRegistrosGV) Is Nothing) Then
                Me.tableRegistrosGV.InitVars
            End If
        End If
        Me.tableRegistrosTotales = CType(MyBase.Tables("RegistrosTotales"),RegistrosTotalesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRegistrosTotales) Is Nothing) Then
                Me.tableRegistrosTotales.InitVars
            End If
        End If
        Me.tableRegistrosV = CType(MyBase.Tables("RegistrosV"),RegistrosVDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRegistrosV) Is Nothing) Then
                Me.tableRegistrosV.InitVars
            End If
        End If
        Me.tableUsuariosComedor = CType(MyBase.Tables("UsuariosComedor"),UsuariosComedorDataTable)
        If (initTable = true) Then
            If (Not (Me.tableUsuariosComedor) Is Nothing) Then
                Me.tableUsuariosComedor.InitVars
            End If
        End If
        Me.relationFK_Apuntes_UsuariosComedor = Me.Relations("FK_Apuntes_UsuariosComedor")
        Me.relationFK_Distribuidores_UsuariosComedor = Me.Relations("FK_Distribuidores_UsuariosComedor")
        Me.relationFK_RegCenas_UsuariosComedor = Me.Relations("FK_RegCenas_UsuariosComedor")
        Me.relationFK_RegComidas_UsuariosComedor = Me.Relations("FK_RegComidas_UsuariosComedor")
        Me.relationFK_RegDesayunos_UsuariosComedor = Me.Relations("FK_RegDesayunos_UsuariosComedor")
        Me.relationFK_RegistrosGa_RegistrosGV = Me.Relations("FK_RegistrosGa_RegistrosGV")
        Me.relationFK_RegistrosGa_UsuariosComedor = Me.Relations("FK_RegistrosGa_UsuariosComedor")
        Me.relationFK_RegistrosV_RegistrosGV = Me.Relations("FK_RegistrosV_RegistrosGV")
        Me.relationFK_RegistrosV_UsuariosComedor = Me.Relations("FK_RegistrosV_UsuariosComedor")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "Comedor_PacificoDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/Comedor_PacificoDataSet1.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableApuntes = New ApuntesDataTable()
        MyBase.Tables.Add(Me.tableApuntes)
        Me.tableDistribuidores = New DistribuidoresDataTable()
        MyBase.Tables.Add(Me.tableDistribuidores)
        Me.tableRegCenas = New RegCenasDataTable()
        MyBase.Tables.Add(Me.tableRegCenas)
        Me.tableRegComidas = New RegComidasDataTable()
        MyBase.Tables.Add(Me.tableRegComidas)
        Me.tableRegDesayunos = New RegDesayunosDataTable()
        MyBase.Tables.Add(Me.tableRegDesayunos)
        Me.tableRegistrosG = New RegistrosGDataTable()
        MyBase.Tables.Add(Me.tableRegistrosG)
        Me.tableRegistrosGV = New RegistrosGVDataTable()
        MyBase.Tables.Add(Me.tableRegistrosGV)
        Me.tableRegistrosTotales = New RegistrosTotalesDataTable()
        MyBase.Tables.Add(Me.tableRegistrosTotales)
        Me.tableRegistrosV = New RegistrosVDataTable()
        MyBase.Tables.Add(Me.tableRegistrosV)
        Me.tableUsuariosComedor = New UsuariosComedorDataTable()
        MyBase.Tables.Add(Me.tableUsuariosComedor)
        Me.relationFK_Apuntes_UsuariosComedor = New Global.System.Data.DataRelation("FK_Apuntes_UsuariosComedor", New Global.System.Data.DataColumn() {Me.tableUsuariosComedor.nCuentaColumn}, New Global.System.Data.DataColumn() {Me.tableApuntes.nCuentaColumn}, false)
        Me.Relations.Add(Me.relationFK_Apuntes_UsuariosComedor)
        Me.relationFK_Distribuidores_UsuariosComedor = New Global.System.Data.DataRelation("FK_Distribuidores_UsuariosComedor", New Global.System.Data.DataColumn() {Me.tableUsuariosComedor.nCuentaColumn}, New Global.System.Data.DataColumn() {Me.tableDistribuidores.nCuentaColumn}, false)
        Me.Relations.Add(Me.relationFK_Distribuidores_UsuariosComedor)
        Me.relationFK_RegCenas_UsuariosComedor = New Global.System.Data.DataRelation("FK_RegCenas_UsuariosComedor", New Global.System.Data.DataColumn() {Me.tableUsuariosComedor.nCuentaColumn}, New Global.System.Data.DataColumn() {Me.tableRegCenas.nCuentaColumn}, false)
        Me.Relations.Add(Me.relationFK_RegCenas_UsuariosComedor)
        Me.relationFK_RegComidas_UsuariosComedor = New Global.System.Data.DataRelation("FK_RegComidas_UsuariosComedor", New Global.System.Data.DataColumn() {Me.tableUsuariosComedor.nCuentaColumn}, New Global.System.Data.DataColumn() {Me.tableRegComidas.nCuentaColumn}, false)
        Me.Relations.Add(Me.relationFK_RegComidas_UsuariosComedor)
        Me.relationFK_RegDesayunos_UsuariosComedor = New Global.System.Data.DataRelation("FK_RegDesayunos_UsuariosComedor", New Global.System.Data.DataColumn() {Me.tableUsuariosComedor.nCuentaColumn}, New Global.System.Data.DataColumn() {Me.tableRegDesayunos.nCuentaColumn}, false)
        Me.Relations.Add(Me.relationFK_RegDesayunos_UsuariosComedor)
        Me.relationFK_RegistrosGa_RegistrosGV = New Global.System.Data.DataRelation("FK_RegistrosGa_RegistrosGV", New Global.System.Data.DataColumn() {Me.tableRegistrosGV.ClaveDiaColumn}, New Global.System.Data.DataColumn() {Me.tableRegistrosG.ClaveDiaColumn}, false)
        Me.Relations.Add(Me.relationFK_RegistrosGa_RegistrosGV)
        Me.relationFK_RegistrosGa_UsuariosComedor = New Global.System.Data.DataRelation("FK_RegistrosGa_UsuariosComedor", New Global.System.Data.DataColumn() {Me.tableUsuariosComedor.nCuentaColumn}, New Global.System.Data.DataColumn() {Me.tableRegistrosG.nCuentaColumn}, false)
        Me.Relations.Add(Me.relationFK_RegistrosGa_UsuariosComedor)
        Me.relationFK_RegistrosV_RegistrosGV = New Global.System.Data.DataRelation("FK_RegistrosV_RegistrosGV", New Global.System.Data.DataColumn() {Me.tableRegistrosGV.ClaveDiaColumn}, New Global.System.Data.DataColumn() {Me.tableRegistrosV.ClaveDiaColumn}, false)
        Me.Relations.Add(Me.relationFK_RegistrosV_RegistrosGV)
        Me.relationFK_RegistrosV_UsuariosComedor = New Global.System.Data.DataRelation("FK_RegistrosV_UsuariosComedor", New Global.System.Data.DataColumn() {Me.tableUsuariosComedor.nCuentaColumn}, New Global.System.Data.DataColumn() {Me.tableRegistrosV.nCuentaColumn}, false)
        Me.Relations.Add(Me.relationFK_RegistrosV_UsuariosComedor)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeApuntes() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeDistribuidores() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeRegCenas() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeRegComidas() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeRegDesayunos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeRegistrosG() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeRegistrosGV() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeRegistrosTotales() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeRegistrosV() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeUsuariosComedor() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As Comedor_PacificoDataSet = New Comedor_PacificoDataSet()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub ApuntesRowChangeEventHandler(ByVal sender As Object, ByVal e As ApuntesRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub DistribuidoresRowChangeEventHandler(ByVal sender As Object, ByVal e As DistribuidoresRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub RegCenasRowChangeEventHandler(ByVal sender As Object, ByVal e As RegCenasRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub RegComidasRowChangeEventHandler(ByVal sender As Object, ByVal e As RegComidasRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub RegDesayunosRowChangeEventHandler(ByVal sender As Object, ByVal e As RegDesayunosRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub RegistrosGRowChangeEventHandler(ByVal sender As Object, ByVal e As RegistrosGRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub RegistrosGVRowChangeEventHandler(ByVal sender As Object, ByVal e As RegistrosGVRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub RegistrosTotalesRowChangeEventHandler(ByVal sender As Object, ByVal e As RegistrosTotalesRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub RegistrosVRowChangeEventHandler(ByVal sender As Object, ByVal e As RegistrosVRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub UsuariosComedorRowChangeEventHandler(ByVal sender As Object, ByVal e As UsuariosComedorRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ApuntesDataTable
        Inherits Global.System.Data.TypedTableBase(Of ApuntesRow)
        
        Private columnnApunte As Global.System.Data.DataColumn
        
        Private columntApunte As Global.System.Data.DataColumn
        
        Private columnnCuenta As Global.System.Data.DataColumn
        
        Private columnTexto As Global.System.Data.DataColumn
        
        Private columnParaTodos As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Apuntes"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property nApunteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnApunte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property tApunteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntApunte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property nCuentaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnCuenta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property TextoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTexto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ParaTodosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnParaTodos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ApuntesRow
            Get
                Return CType(Me.Rows(index),ApuntesRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event ApuntesRowChanging As ApuntesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event ApuntesRowChanged As ApuntesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event ApuntesRowDeleting As ApuntesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event ApuntesRowDeleted As ApuntesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddApuntesRow(ByVal row As ApuntesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddApuntesRow(ByVal tApunte As String, ByVal parentUsuariosComedorRowByFK_Apuntes_UsuariosComedor As UsuariosComedorRow, ByVal Texto As String, ByVal ParaTodos As Integer) As ApuntesRow
            Dim rowApuntesRow As ApuntesRow = CType(Me.NewRow,ApuntesRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, tApunte, Nothing, Texto, ParaTodos}
            If (Not (parentUsuariosComedorRowByFK_Apuntes_UsuariosComedor) Is Nothing) Then
                columnValuesArray(2) = parentUsuariosComedorRowByFK_Apuntes_UsuariosComedor(0)
            End If
            rowApuntesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowApuntesRow)
            Return rowApuntesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindBynApunte(ByVal nApunte As Integer) As ApuntesRow
            Return CType(Me.Rows.Find(New Object() {nApunte}),ApuntesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ApuntesDataTable = CType(MyBase.Clone,ApuntesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ApuntesDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnnApunte = MyBase.Columns("nApunte")
            Me.columntApunte = MyBase.Columns("tApunte")
            Me.columnnCuenta = MyBase.Columns("nCuenta")
            Me.columnTexto = MyBase.Columns("Texto")
            Me.columnParaTodos = MyBase.Columns("ParaTodos")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnnApunte = New Global.System.Data.DataColumn("nApunte", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnApunte)
            Me.columntApunte = New Global.System.Data.DataColumn("tApunte", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntApunte)
            Me.columnnCuenta = New Global.System.Data.DataColumn("nCuenta", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnCuenta)
            Me.columnTexto = New Global.System.Data.DataColumn("Texto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTexto)
            Me.columnParaTodos = New Global.System.Data.DataColumn("ParaTodos", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnParaTodos)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnnApunte}, true))
            Me.columnnApunte.AutoIncrement = true
            Me.columnnApunte.AutoIncrementSeed = -1
            Me.columnnApunte.AutoIncrementStep = -1
            Me.columnnApunte.AllowDBNull = false
            Me.columnnApunte.ReadOnly = true
            Me.columnnApunte.Unique = true
            Me.columntApunte.AllowDBNull = false
            Me.columntApunte.MaxLength = 50
            Me.columnnCuenta.AllowDBNull = false
            Me.columnTexto.AllowDBNull = false
            Me.columnTexto.MaxLength = 1073741823
            Me.columnParaTodos.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewApuntesRow() As ApuntesRow
            Return CType(Me.NewRow,ApuntesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ApuntesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ApuntesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ApuntesRowChangedEvent) Is Nothing) Then
                RaiseEvent ApuntesRowChanged(Me, New ApuntesRowChangeEvent(CType(e.Row,ApuntesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ApuntesRowChangingEvent) Is Nothing) Then
                RaiseEvent ApuntesRowChanging(Me, New ApuntesRowChangeEvent(CType(e.Row,ApuntesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ApuntesRowDeletedEvent) Is Nothing) Then
                RaiseEvent ApuntesRowDeleted(Me, New ApuntesRowChangeEvent(CType(e.Row,ApuntesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ApuntesRowDeletingEvent) Is Nothing) Then
                RaiseEvent ApuntesRowDeleting(Me, New ApuntesRowChangeEvent(CType(e.Row,ApuntesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveApuntesRow(ByVal row As ApuntesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As Comedor_PacificoDataSet = New Comedor_PacificoDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ApuntesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DistribuidoresDataTable
        Inherits Global.System.Data.TypedTableBase(Of DistribuidoresRow)
        
        Private columnnDistribuidor As Global.System.Data.DataColumn
        
        Private columnNombreDistribudor As Global.System.Data.DataColumn
        
        Private columnDiasAsistencia As Global.System.Data.DataColumn
        
        Private columnHoraAsistencia As Global.System.Data.DataColumn
        
        Private columnNombreEmpleado As Global.System.Data.DataColumn
        
        Private columnNumeroTelefonico As Global.System.Data.DataColumn
        
        Private columnMontoAprox As Global.System.Data.DataColumn
        
        Private columnnCuenta As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Distribuidores"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property nDistribuidorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnDistribuidor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NombreDistribudorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreDistribudor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property DiasAsistenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiasAsistencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property HoraAsistenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHoraAsistencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NombreEmpleadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreEmpleado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NumeroTelefonicoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumeroTelefonico
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property MontoAproxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoAprox
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property nCuentaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnCuenta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DistribuidoresRow
            Get
                Return CType(Me.Rows(index),DistribuidoresRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event DistribuidoresRowChanging As DistribuidoresRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event DistribuidoresRowChanged As DistribuidoresRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event DistribuidoresRowDeleting As DistribuidoresRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event DistribuidoresRowDeleted As DistribuidoresRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddDistribuidoresRow(ByVal row As DistribuidoresRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddDistribuidoresRow(ByVal NombreDistribudor As String, ByVal DiasAsistencia As String, ByVal HoraAsistencia As String, ByVal NombreEmpleado As String, ByVal NumeroTelefonico As String, ByVal MontoAprox As Integer, ByVal parentUsuariosComedorRowByFK_Distribuidores_UsuariosComedor As UsuariosComedorRow) As DistribuidoresRow
            Dim rowDistribuidoresRow As DistribuidoresRow = CType(Me.NewRow,DistribuidoresRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, NombreDistribudor, DiasAsistencia, HoraAsistencia, NombreEmpleado, NumeroTelefonico, MontoAprox, Nothing}
            If (Not (parentUsuariosComedorRowByFK_Distribuidores_UsuariosComedor) Is Nothing) Then
                columnValuesArray(7) = parentUsuariosComedorRowByFK_Distribuidores_UsuariosComedor(0)
            End If
            rowDistribuidoresRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDistribuidoresRow)
            Return rowDistribuidoresRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindBynDistribuidor(ByVal nDistribuidor As Integer) As DistribuidoresRow
            Return CType(Me.Rows.Find(New Object() {nDistribuidor}),DistribuidoresRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DistribuidoresDataTable = CType(MyBase.Clone,DistribuidoresDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DistribuidoresDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnnDistribuidor = MyBase.Columns("nDistribuidor")
            Me.columnNombreDistribudor = MyBase.Columns("NombreDistribudor")
            Me.columnDiasAsistencia = MyBase.Columns("DiasAsistencia")
            Me.columnHoraAsistencia = MyBase.Columns("HoraAsistencia")
            Me.columnNombreEmpleado = MyBase.Columns("NombreEmpleado")
            Me.columnNumeroTelefonico = MyBase.Columns("NumeroTelefonico")
            Me.columnMontoAprox = MyBase.Columns("MontoAprox")
            Me.columnnCuenta = MyBase.Columns("nCuenta")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnnDistribuidor = New Global.System.Data.DataColumn("nDistribuidor", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnDistribuidor)
            Me.columnNombreDistribudor = New Global.System.Data.DataColumn("NombreDistribudor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreDistribudor)
            Me.columnDiasAsistencia = New Global.System.Data.DataColumn("DiasAsistencia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiasAsistencia)
            Me.columnHoraAsistencia = New Global.System.Data.DataColumn("HoraAsistencia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHoraAsistencia)
            Me.columnNombreEmpleado = New Global.System.Data.DataColumn("NombreEmpleado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreEmpleado)
            Me.columnNumeroTelefonico = New Global.System.Data.DataColumn("NumeroTelefonico", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumeroTelefonico)
            Me.columnMontoAprox = New Global.System.Data.DataColumn("MontoAprox", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoAprox)
            Me.columnnCuenta = New Global.System.Data.DataColumn("nCuenta", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnCuenta)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnnDistribuidor}, true))
            Me.columnnDistribuidor.AutoIncrement = true
            Me.columnnDistribuidor.AutoIncrementSeed = -1
            Me.columnnDistribuidor.AutoIncrementStep = -1
            Me.columnnDistribuidor.AllowDBNull = false
            Me.columnnDistribuidor.ReadOnly = true
            Me.columnnDistribuidor.Unique = true
            Me.columnNombreDistribudor.AllowDBNull = false
            Me.columnNombreDistribudor.MaxLength = 50
            Me.columnDiasAsistencia.AllowDBNull = false
            Me.columnDiasAsistencia.MaxLength = 50
            Me.columnHoraAsistencia.AllowDBNull = false
            Me.columnHoraAsistencia.MaxLength = 50
            Me.columnNombreEmpleado.AllowDBNull = false
            Me.columnNombreEmpleado.MaxLength = 50
            Me.columnNumeroTelefonico.MaxLength = 20
            Me.columnMontoAprox.AllowDBNull = false
            Me.columnnCuenta.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewDistribuidoresRow() As DistribuidoresRow
            Return CType(Me.NewRow,DistribuidoresRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DistribuidoresRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DistribuidoresRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DistribuidoresRowChangedEvent) Is Nothing) Then
                RaiseEvent DistribuidoresRowChanged(Me, New DistribuidoresRowChangeEvent(CType(e.Row,DistribuidoresRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DistribuidoresRowChangingEvent) Is Nothing) Then
                RaiseEvent DistribuidoresRowChanging(Me, New DistribuidoresRowChangeEvent(CType(e.Row,DistribuidoresRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DistribuidoresRowDeletedEvent) Is Nothing) Then
                RaiseEvent DistribuidoresRowDeleted(Me, New DistribuidoresRowChangeEvent(CType(e.Row,DistribuidoresRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DistribuidoresRowDeletingEvent) Is Nothing) Then
                RaiseEvent DistribuidoresRowDeleting(Me, New DistribuidoresRowChangeEvent(CType(e.Row,DistribuidoresRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveDistribuidoresRow(ByVal row As DistribuidoresRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As Comedor_PacificoDataSet = New Comedor_PacificoDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DistribuidoresDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RegCenasDataTable
        Inherits Global.System.Data.TypedTableBase(Of RegCenasRow)
        
        Private columnClaveDia As Global.System.Data.DataColumn
        
        Private columnnCuenta As Global.System.Data.DataColumn
        
        Private columnECO As Global.System.Data.DataColumn
        
        Private columnLaptop As Global.System.Data.DataColumn
        
        Private columnSinCredencial As Global.System.Data.DataColumn
        
        Private columnPorProducto As Global.System.Data.DataColumn
        
        Private columntCenas As Global.System.Data.DataColumn
        
        Private columnHora As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "RegCenas"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ClaveDiaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClaveDia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property nCuentaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnCuenta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ECOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnECO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property LaptopColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLaptop
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property SinCredencialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSinCredencial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property PorProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPorProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property tCenasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntCenas
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property HoraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHora
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RegCenasRow
            Get
                Return CType(Me.Rows(index),RegCenasRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event RegCenasRowChanging As RegCenasRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event RegCenasRowChanged As RegCenasRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event RegCenasRowDeleting As RegCenasRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event RegCenasRowDeleted As RegCenasRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddRegCenasRow(ByVal row As RegCenasRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddRegCenasRow(ByVal ClaveDia As String, ByVal parentUsuariosComedorRowByFK_RegCenas_UsuariosComedor As UsuariosComedorRow, ByVal ECO As Integer, ByVal Laptop As Integer, ByVal SinCredencial As Integer, ByVal PorProducto As Integer, ByVal tCenas As Integer, ByVal Hora As String) As RegCenasRow
            Dim rowRegCenasRow As RegCenasRow = CType(Me.NewRow,RegCenasRow)
            Dim columnValuesArray() As Object = New Object() {ClaveDia, Nothing, ECO, Laptop, SinCredencial, PorProducto, tCenas, Hora}
            If (Not (parentUsuariosComedorRowByFK_RegCenas_UsuariosComedor) Is Nothing) Then
                columnValuesArray(1) = parentUsuariosComedorRowByFK_RegCenas_UsuariosComedor(0)
            End If
            rowRegCenasRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRegCenasRow)
            Return rowRegCenasRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindByClaveDia(ByVal ClaveDia As String) As RegCenasRow
            Return CType(Me.Rows.Find(New Object() {ClaveDia}),RegCenasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RegCenasDataTable = CType(MyBase.Clone,RegCenasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RegCenasDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnClaveDia = MyBase.Columns("ClaveDia")
            Me.columnnCuenta = MyBase.Columns("nCuenta")
            Me.columnECO = MyBase.Columns("ECO")
            Me.columnLaptop = MyBase.Columns("Laptop")
            Me.columnSinCredencial = MyBase.Columns("SinCredencial")
            Me.columnPorProducto = MyBase.Columns("PorProducto")
            Me.columntCenas = MyBase.Columns("tCenas")
            Me.columnHora = MyBase.Columns("Hora")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnClaveDia = New Global.System.Data.DataColumn("ClaveDia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClaveDia)
            Me.columnnCuenta = New Global.System.Data.DataColumn("nCuenta", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnCuenta)
            Me.columnECO = New Global.System.Data.DataColumn("ECO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnECO)
            Me.columnLaptop = New Global.System.Data.DataColumn("Laptop", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLaptop)
            Me.columnSinCredencial = New Global.System.Data.DataColumn("SinCredencial", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSinCredencial)
            Me.columnPorProducto = New Global.System.Data.DataColumn("PorProducto", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPorProducto)
            Me.columntCenas = New Global.System.Data.DataColumn("tCenas", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntCenas)
            Me.columnHora = New Global.System.Data.DataColumn("Hora", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHora)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnClaveDia}, true))
            Me.columnClaveDia.AllowDBNull = false
            Me.columnClaveDia.Unique = true
            Me.columnClaveDia.MaxLength = 20
            Me.columnnCuenta.AllowDBNull = false
            Me.columnECO.AllowDBNull = false
            Me.columnLaptop.AllowDBNull = false
            Me.columnSinCredencial.AllowDBNull = false
            Me.columnPorProducto.AllowDBNull = false
            Me.columntCenas.AllowDBNull = false
            Me.columnHora.AllowDBNull = false
            Me.columnHora.MaxLength = 20
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewRegCenasRow() As RegCenasRow
            Return CType(Me.NewRow,RegCenasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RegCenasRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RegCenasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RegCenasRowChangedEvent) Is Nothing) Then
                RaiseEvent RegCenasRowChanged(Me, New RegCenasRowChangeEvent(CType(e.Row,RegCenasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RegCenasRowChangingEvent) Is Nothing) Then
                RaiseEvent RegCenasRowChanging(Me, New RegCenasRowChangeEvent(CType(e.Row,RegCenasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RegCenasRowDeletedEvent) Is Nothing) Then
                RaiseEvent RegCenasRowDeleted(Me, New RegCenasRowChangeEvent(CType(e.Row,RegCenasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RegCenasRowDeletingEvent) Is Nothing) Then
                RaiseEvent RegCenasRowDeleting(Me, New RegCenasRowChangeEvent(CType(e.Row,RegCenasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveRegCenasRow(ByVal row As RegCenasRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As Comedor_PacificoDataSet = New Comedor_PacificoDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RegCenasDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RegComidasDataTable
        Inherits Global.System.Data.TypedTableBase(Of RegComidasRow)
        
        Private columnClaveDia As Global.System.Data.DataColumn
        
        Private columnnCuenta As Global.System.Data.DataColumn
        
        Private columnECO As Global.System.Data.DataColumn
        
        Private columnLaptop As Global.System.Data.DataColumn
        
        Private columnSinCredencial As Global.System.Data.DataColumn
        
        Private columnPorProducto As Global.System.Data.DataColumn
        
        Private columntComidas As Global.System.Data.DataColumn
        
        Private columnHora As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "RegComidas"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ClaveDiaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClaveDia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property nCuentaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnCuenta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ECOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnECO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property LaptopColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLaptop
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property SinCredencialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSinCredencial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property PorProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPorProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property tComidasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntComidas
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property HoraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHora
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RegComidasRow
            Get
                Return CType(Me.Rows(index),RegComidasRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event RegComidasRowChanging As RegComidasRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event RegComidasRowChanged As RegComidasRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event RegComidasRowDeleting As RegComidasRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event RegComidasRowDeleted As RegComidasRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddRegComidasRow(ByVal row As RegComidasRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddRegComidasRow(ByVal ClaveDia As String, ByVal parentUsuariosComedorRowByFK_RegComidas_UsuariosComedor As UsuariosComedorRow, ByVal ECO As Integer, ByVal Laptop As Integer, ByVal SinCredencial As Integer, ByVal PorProducto As Integer, ByVal tComidas As Integer, ByVal Hora As String) As RegComidasRow
            Dim rowRegComidasRow As RegComidasRow = CType(Me.NewRow,RegComidasRow)
            Dim columnValuesArray() As Object = New Object() {ClaveDia, Nothing, ECO, Laptop, SinCredencial, PorProducto, tComidas, Hora}
            If (Not (parentUsuariosComedorRowByFK_RegComidas_UsuariosComedor) Is Nothing) Then
                columnValuesArray(1) = parentUsuariosComedorRowByFK_RegComidas_UsuariosComedor(0)
            End If
            rowRegComidasRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRegComidasRow)
            Return rowRegComidasRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindByClaveDia(ByVal ClaveDia As String) As RegComidasRow
            Return CType(Me.Rows.Find(New Object() {ClaveDia}),RegComidasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RegComidasDataTable = CType(MyBase.Clone,RegComidasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RegComidasDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnClaveDia = MyBase.Columns("ClaveDia")
            Me.columnnCuenta = MyBase.Columns("nCuenta")
            Me.columnECO = MyBase.Columns("ECO")
            Me.columnLaptop = MyBase.Columns("Laptop")
            Me.columnSinCredencial = MyBase.Columns("SinCredencial")
            Me.columnPorProducto = MyBase.Columns("PorProducto")
            Me.columntComidas = MyBase.Columns("tComidas")
            Me.columnHora = MyBase.Columns("Hora")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnClaveDia = New Global.System.Data.DataColumn("ClaveDia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClaveDia)
            Me.columnnCuenta = New Global.System.Data.DataColumn("nCuenta", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnCuenta)
            Me.columnECO = New Global.System.Data.DataColumn("ECO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnECO)
            Me.columnLaptop = New Global.System.Data.DataColumn("Laptop", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLaptop)
            Me.columnSinCredencial = New Global.System.Data.DataColumn("SinCredencial", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSinCredencial)
            Me.columnPorProducto = New Global.System.Data.DataColumn("PorProducto", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPorProducto)
            Me.columntComidas = New Global.System.Data.DataColumn("tComidas", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntComidas)
            Me.columnHora = New Global.System.Data.DataColumn("Hora", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHora)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnClaveDia}, true))
            Me.columnClaveDia.AllowDBNull = false
            Me.columnClaveDia.Unique = true
            Me.columnClaveDia.MaxLength = 20
            Me.columnnCuenta.AllowDBNull = false
            Me.columnECO.AllowDBNull = false
            Me.columnLaptop.AllowDBNull = false
            Me.columnSinCredencial.AllowDBNull = false
            Me.columnPorProducto.AllowDBNull = false
            Me.columntComidas.AllowDBNull = false
            Me.columnHora.AllowDBNull = false
            Me.columnHora.MaxLength = 30
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewRegComidasRow() As RegComidasRow
            Return CType(Me.NewRow,RegComidasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RegComidasRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RegComidasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RegComidasRowChangedEvent) Is Nothing) Then
                RaiseEvent RegComidasRowChanged(Me, New RegComidasRowChangeEvent(CType(e.Row,RegComidasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RegComidasRowChangingEvent) Is Nothing) Then
                RaiseEvent RegComidasRowChanging(Me, New RegComidasRowChangeEvent(CType(e.Row,RegComidasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RegComidasRowDeletedEvent) Is Nothing) Then
                RaiseEvent RegComidasRowDeleted(Me, New RegComidasRowChangeEvent(CType(e.Row,RegComidasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RegComidasRowDeletingEvent) Is Nothing) Then
                RaiseEvent RegComidasRowDeleting(Me, New RegComidasRowChangeEvent(CType(e.Row,RegComidasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveRegComidasRow(ByVal row As RegComidasRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As Comedor_PacificoDataSet = New Comedor_PacificoDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RegComidasDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RegDesayunosDataTable
        Inherits Global.System.Data.TypedTableBase(Of RegDesayunosRow)
        
        Private columnClaveDia As Global.System.Data.DataColumn
        
        Private columnnCuenta As Global.System.Data.DataColumn
        
        Private columnECO As Global.System.Data.DataColumn
        
        Private columnLaptop As Global.System.Data.DataColumn
        
        Private columnSinCredencial As Global.System.Data.DataColumn
        
        Private columnPorProducto As Global.System.Data.DataColumn
        
        Private columntDesayunos As Global.System.Data.DataColumn
        
        Private columnHora As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "RegDesayunos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ClaveDiaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClaveDia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property nCuentaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnCuenta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ECOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnECO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property LaptopColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLaptop
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property SinCredencialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSinCredencial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property PorProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPorProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property tDesayunosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntDesayunos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property HoraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHora
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RegDesayunosRow
            Get
                Return CType(Me.Rows(index),RegDesayunosRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event RegDesayunosRowChanging As RegDesayunosRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event RegDesayunosRowChanged As RegDesayunosRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event RegDesayunosRowDeleting As RegDesayunosRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event RegDesayunosRowDeleted As RegDesayunosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddRegDesayunosRow(ByVal row As RegDesayunosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddRegDesayunosRow(ByVal ClaveDia As String, ByVal parentUsuariosComedorRowByFK_RegDesayunos_UsuariosComedor As UsuariosComedorRow, ByVal ECO As Integer, ByVal Laptop As Integer, ByVal SinCredencial As Integer, ByVal PorProducto As Integer, ByVal tDesayunos As Integer, ByVal Hora As String) As RegDesayunosRow
            Dim rowRegDesayunosRow As RegDesayunosRow = CType(Me.NewRow,RegDesayunosRow)
            Dim columnValuesArray() As Object = New Object() {ClaveDia, Nothing, ECO, Laptop, SinCredencial, PorProducto, tDesayunos, Hora}
            If (Not (parentUsuariosComedorRowByFK_RegDesayunos_UsuariosComedor) Is Nothing) Then
                columnValuesArray(1) = parentUsuariosComedorRowByFK_RegDesayunos_UsuariosComedor(0)
            End If
            rowRegDesayunosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRegDesayunosRow)
            Return rowRegDesayunosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindByClaveDia(ByVal ClaveDia As String) As RegDesayunosRow
            Return CType(Me.Rows.Find(New Object() {ClaveDia}),RegDesayunosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RegDesayunosDataTable = CType(MyBase.Clone,RegDesayunosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RegDesayunosDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnClaveDia = MyBase.Columns("ClaveDia")
            Me.columnnCuenta = MyBase.Columns("nCuenta")
            Me.columnECO = MyBase.Columns("ECO")
            Me.columnLaptop = MyBase.Columns("Laptop")
            Me.columnSinCredencial = MyBase.Columns("SinCredencial")
            Me.columnPorProducto = MyBase.Columns("PorProducto")
            Me.columntDesayunos = MyBase.Columns("tDesayunos")
            Me.columnHora = MyBase.Columns("Hora")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnClaveDia = New Global.System.Data.DataColumn("ClaveDia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClaveDia)
            Me.columnnCuenta = New Global.System.Data.DataColumn("nCuenta", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnCuenta)
            Me.columnECO = New Global.System.Data.DataColumn("ECO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnECO)
            Me.columnLaptop = New Global.System.Data.DataColumn("Laptop", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLaptop)
            Me.columnSinCredencial = New Global.System.Data.DataColumn("SinCredencial", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSinCredencial)
            Me.columnPorProducto = New Global.System.Data.DataColumn("PorProducto", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPorProducto)
            Me.columntDesayunos = New Global.System.Data.DataColumn("tDesayunos", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntDesayunos)
            Me.columnHora = New Global.System.Data.DataColumn("Hora", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHora)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnClaveDia}, true))
            Me.columnClaveDia.AllowDBNull = false
            Me.columnClaveDia.Unique = true
            Me.columnClaveDia.MaxLength = 20
            Me.columnnCuenta.AllowDBNull = false
            Me.columnECO.AllowDBNull = false
            Me.columnLaptop.AllowDBNull = false
            Me.columnSinCredencial.AllowDBNull = false
            Me.columnPorProducto.AllowDBNull = false
            Me.columntDesayunos.AllowDBNull = false
            Me.columnHora.AllowDBNull = false
            Me.columnHora.MaxLength = 30
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewRegDesayunosRow() As RegDesayunosRow
            Return CType(Me.NewRow,RegDesayunosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RegDesayunosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RegDesayunosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RegDesayunosRowChangedEvent) Is Nothing) Then
                RaiseEvent RegDesayunosRowChanged(Me, New RegDesayunosRowChangeEvent(CType(e.Row,RegDesayunosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RegDesayunosRowChangingEvent) Is Nothing) Then
                RaiseEvent RegDesayunosRowChanging(Me, New RegDesayunosRowChangeEvent(CType(e.Row,RegDesayunosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RegDesayunosRowDeletedEvent) Is Nothing) Then
                RaiseEvent RegDesayunosRowDeleted(Me, New RegDesayunosRowChangeEvent(CType(e.Row,RegDesayunosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RegDesayunosRowDeletingEvent) Is Nothing) Then
                RaiseEvent RegDesayunosRowDeleting(Me, New RegDesayunosRowChangeEvent(CType(e.Row,RegDesayunosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveRegDesayunosRow(ByVal row As RegDesayunosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As Comedor_PacificoDataSet = New Comedor_PacificoDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RegDesayunosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RegistrosGDataTable
        Inherits Global.System.Data.TypedTableBase(Of RegistrosGRow)
        
        Private columnnRegistro As Global.System.Data.DataColumn
        
        Private columnClaveDia As Global.System.Data.DataColumn
        
        Private columnnCuenta As Global.System.Data.DataColumn
        
        Private columnMotivo As Global.System.Data.DataColumn
        
        Private columnMonto As Global.System.Data.DataColumn
        
        Private columnHora As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "RegistrosG"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property nRegistroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnRegistro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ClaveDiaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClaveDia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property nCuentaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnCuenta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property MotivoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMotivo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property MontoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property HoraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHora
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RegistrosGRow
            Get
                Return CType(Me.Rows(index),RegistrosGRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event RegistrosGRowChanging As RegistrosGRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event RegistrosGRowChanged As RegistrosGRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event RegistrosGRowDeleting As RegistrosGRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event RegistrosGRowDeleted As RegistrosGRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddRegistrosGRow(ByVal row As RegistrosGRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddRegistrosGRow(ByVal parentRegistrosGVRowByFK_RegistrosGa_RegistrosGV As RegistrosGVRow, ByVal parentUsuariosComedorRowByFK_RegistrosGa_UsuariosComedor As UsuariosComedorRow, ByVal Motivo As String, ByVal Monto As Integer, ByVal Hora As String) As RegistrosGRow
            Dim rowRegistrosGRow As RegistrosGRow = CType(Me.NewRow,RegistrosGRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, Nothing, Motivo, Monto, Hora}
            If (Not (parentRegistrosGVRowByFK_RegistrosGa_RegistrosGV) Is Nothing) Then
                columnValuesArray(1) = parentRegistrosGVRowByFK_RegistrosGa_RegistrosGV(0)
            End If
            If (Not (parentUsuariosComedorRowByFK_RegistrosGa_UsuariosComedor) Is Nothing) Then
                columnValuesArray(2) = parentUsuariosComedorRowByFK_RegistrosGa_UsuariosComedor(0)
            End If
            rowRegistrosGRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRegistrosGRow)
            Return rowRegistrosGRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindBynRegistro(ByVal nRegistro As Integer) As RegistrosGRow
            Return CType(Me.Rows.Find(New Object() {nRegistro}),RegistrosGRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RegistrosGDataTable = CType(MyBase.Clone,RegistrosGDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RegistrosGDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnnRegistro = MyBase.Columns("nRegistro")
            Me.columnClaveDia = MyBase.Columns("ClaveDia")
            Me.columnnCuenta = MyBase.Columns("nCuenta")
            Me.columnMotivo = MyBase.Columns("Motivo")
            Me.columnMonto = MyBase.Columns("Monto")
            Me.columnHora = MyBase.Columns("Hora")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnnRegistro = New Global.System.Data.DataColumn("nRegistro", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnRegistro)
            Me.columnClaveDia = New Global.System.Data.DataColumn("ClaveDia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClaveDia)
            Me.columnnCuenta = New Global.System.Data.DataColumn("nCuenta", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnCuenta)
            Me.columnMotivo = New Global.System.Data.DataColumn("Motivo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMotivo)
            Me.columnMonto = New Global.System.Data.DataColumn("Monto", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMonto)
            Me.columnHora = New Global.System.Data.DataColumn("Hora", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHora)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnnRegistro}, true))
            Me.columnnRegistro.AutoIncrement = true
            Me.columnnRegistro.AutoIncrementSeed = -1
            Me.columnnRegistro.AutoIncrementStep = -1
            Me.columnnRegistro.AllowDBNull = false
            Me.columnnRegistro.ReadOnly = true
            Me.columnnRegistro.Unique = true
            Me.columnClaveDia.AllowDBNull = false
            Me.columnClaveDia.MaxLength = 20
            Me.columnnCuenta.AllowDBNull = false
            Me.columnMotivo.AllowDBNull = false
            Me.columnMotivo.MaxLength = 50
            Me.columnMonto.AllowDBNull = false
            Me.columnHora.AllowDBNull = false
            Me.columnHora.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewRegistrosGRow() As RegistrosGRow
            Return CType(Me.NewRow,RegistrosGRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RegistrosGRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RegistrosGRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RegistrosGRowChangedEvent) Is Nothing) Then
                RaiseEvent RegistrosGRowChanged(Me, New RegistrosGRowChangeEvent(CType(e.Row,RegistrosGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RegistrosGRowChangingEvent) Is Nothing) Then
                RaiseEvent RegistrosGRowChanging(Me, New RegistrosGRowChangeEvent(CType(e.Row,RegistrosGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RegistrosGRowDeletedEvent) Is Nothing) Then
                RaiseEvent RegistrosGRowDeleted(Me, New RegistrosGRowChangeEvent(CType(e.Row,RegistrosGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RegistrosGRowDeletingEvent) Is Nothing) Then
                RaiseEvent RegistrosGRowDeleting(Me, New RegistrosGRowChangeEvent(CType(e.Row,RegistrosGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveRegistrosGRow(ByVal row As RegistrosGRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As Comedor_PacificoDataSet = New Comedor_PacificoDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RegistrosGDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RegistrosGVDataTable
        Inherits Global.System.Data.TypedTableBase(Of RegistrosGVRow)
        
        Private columnClaveDia As Global.System.Data.DataColumn
        
        Private columnDia As Global.System.Data.DataColumn
        
        Private columnnomDia As Global.System.Data.DataColumn
        
        Private columntGasto As Global.System.Data.DataColumn
        
        Private columntVenta As Global.System.Data.DataColumn
        
        Private columnBalance As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "RegistrosGV"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ClaveDiaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClaveDia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property DiaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property nomDiaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnomDia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property tGastoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntGasto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property tVentaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntVenta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property BalanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBalance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RegistrosGVRow
            Get
                Return CType(Me.Rows(index),RegistrosGVRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event RegistrosGVRowChanging As RegistrosGVRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event RegistrosGVRowChanged As RegistrosGVRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event RegistrosGVRowDeleting As RegistrosGVRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event RegistrosGVRowDeleted As RegistrosGVRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddRegistrosGVRow(ByVal row As RegistrosGVRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddRegistrosGVRow(ByVal ClaveDia As String, ByVal Dia As String, ByVal nomDia As String, ByVal tGasto As Integer, ByVal tVenta As Integer, ByVal Balance As Integer) As RegistrosGVRow
            Dim rowRegistrosGVRow As RegistrosGVRow = CType(Me.NewRow,RegistrosGVRow)
            Dim columnValuesArray() As Object = New Object() {ClaveDia, Dia, nomDia, tGasto, tVenta, Balance}
            rowRegistrosGVRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRegistrosGVRow)
            Return rowRegistrosGVRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindByClaveDia(ByVal ClaveDia As String) As RegistrosGVRow
            Return CType(Me.Rows.Find(New Object() {ClaveDia}),RegistrosGVRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RegistrosGVDataTable = CType(MyBase.Clone,RegistrosGVDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RegistrosGVDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnClaveDia = MyBase.Columns("ClaveDia")
            Me.columnDia = MyBase.Columns("Dia")
            Me.columnnomDia = MyBase.Columns("nomDia")
            Me.columntGasto = MyBase.Columns("tGasto")
            Me.columntVenta = MyBase.Columns("tVenta")
            Me.columnBalance = MyBase.Columns("Balance")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnClaveDia = New Global.System.Data.DataColumn("ClaveDia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClaveDia)
            Me.columnDia = New Global.System.Data.DataColumn("Dia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDia)
            Me.columnnomDia = New Global.System.Data.DataColumn("nomDia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnomDia)
            Me.columntGasto = New Global.System.Data.DataColumn("tGasto", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntGasto)
            Me.columntVenta = New Global.System.Data.DataColumn("tVenta", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntVenta)
            Me.columnBalance = New Global.System.Data.DataColumn("Balance", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBalance)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnClaveDia}, true))
            Me.columnClaveDia.AllowDBNull = false
            Me.columnClaveDia.Unique = true
            Me.columnClaveDia.MaxLength = 20
            Me.columnDia.AllowDBNull = false
            Me.columnDia.MaxLength = 10
            Me.columnnomDia.AllowDBNull = false
            Me.columnnomDia.MaxLength = 20
            Me.columntGasto.AllowDBNull = false
            Me.columntVenta.AllowDBNull = false
            Me.columnBalance.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewRegistrosGVRow() As RegistrosGVRow
            Return CType(Me.NewRow,RegistrosGVRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RegistrosGVRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RegistrosGVRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RegistrosGVRowChangedEvent) Is Nothing) Then
                RaiseEvent RegistrosGVRowChanged(Me, New RegistrosGVRowChangeEvent(CType(e.Row,RegistrosGVRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RegistrosGVRowChangingEvent) Is Nothing) Then
                RaiseEvent RegistrosGVRowChanging(Me, New RegistrosGVRowChangeEvent(CType(e.Row,RegistrosGVRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RegistrosGVRowDeletedEvent) Is Nothing) Then
                RaiseEvent RegistrosGVRowDeleted(Me, New RegistrosGVRowChangeEvent(CType(e.Row,RegistrosGVRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RegistrosGVRowDeletingEvent) Is Nothing) Then
                RaiseEvent RegistrosGVRowDeleting(Me, New RegistrosGVRowChangeEvent(CType(e.Row,RegistrosGVRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveRegistrosGVRow(ByVal row As RegistrosGVRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As Comedor_PacificoDataSet = New Comedor_PacificoDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RegistrosGVDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RegistrosTotalesDataTable
        Inherits Global.System.Data.TypedTableBase(Of RegistrosTotalesRow)
        
        Private columnClaveDia As Global.System.Data.DataColumn
        
        Private columntEco As Global.System.Data.DataColumn
        
        Private columntLaptop As Global.System.Data.DataColumn
        
        Private columntSinCredencial As Global.System.Data.DataColumn
        
        Private columntProducto As Global.System.Data.DataColumn
        
        Private columnTotal As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "RegistrosTotales"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ClaveDiaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClaveDia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property tEcoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntEco
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property tLaptopColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntLaptop
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property tSinCredencialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntSinCredencial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property tProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property TotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RegistrosTotalesRow
            Get
                Return CType(Me.Rows(index),RegistrosTotalesRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event RegistrosTotalesRowChanging As RegistrosTotalesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event RegistrosTotalesRowChanged As RegistrosTotalesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event RegistrosTotalesRowDeleting As RegistrosTotalesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event RegistrosTotalesRowDeleted As RegistrosTotalesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddRegistrosTotalesRow(ByVal row As RegistrosTotalesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddRegistrosTotalesRow(ByVal ClaveDia As String, ByVal tEco As Integer, ByVal tLaptop As Integer, ByVal tSinCredencial As Integer, ByVal tProducto As Integer, ByVal Total As Long) As RegistrosTotalesRow
            Dim rowRegistrosTotalesRow As RegistrosTotalesRow = CType(Me.NewRow,RegistrosTotalesRow)
            Dim columnValuesArray() As Object = New Object() {ClaveDia, tEco, tLaptop, tSinCredencial, tProducto, Total}
            rowRegistrosTotalesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRegistrosTotalesRow)
            Return rowRegistrosTotalesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindByClaveDia(ByVal ClaveDia As String) As RegistrosTotalesRow
            Return CType(Me.Rows.Find(New Object() {ClaveDia}),RegistrosTotalesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RegistrosTotalesDataTable = CType(MyBase.Clone,RegistrosTotalesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RegistrosTotalesDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnClaveDia = MyBase.Columns("ClaveDia")
            Me.columntEco = MyBase.Columns("tEco")
            Me.columntLaptop = MyBase.Columns("tLaptop")
            Me.columntSinCredencial = MyBase.Columns("tSinCredencial")
            Me.columntProducto = MyBase.Columns("tProducto")
            Me.columnTotal = MyBase.Columns("Total")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnClaveDia = New Global.System.Data.DataColumn("ClaveDia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClaveDia)
            Me.columntEco = New Global.System.Data.DataColumn("tEco", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntEco)
            Me.columntLaptop = New Global.System.Data.DataColumn("tLaptop", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntLaptop)
            Me.columntSinCredencial = New Global.System.Data.DataColumn("tSinCredencial", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntSinCredencial)
            Me.columntProducto = New Global.System.Data.DataColumn("tProducto", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntProducto)
            Me.columnTotal = New Global.System.Data.DataColumn("Total", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotal)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnClaveDia}, true))
            Me.columnClaveDia.AllowDBNull = false
            Me.columnClaveDia.Unique = true
            Me.columnClaveDia.MaxLength = 20
            Me.columntEco.AllowDBNull = false
            Me.columntLaptop.AllowDBNull = false
            Me.columntSinCredencial.AllowDBNull = false
            Me.columntProducto.AllowDBNull = false
            Me.columnTotal.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewRegistrosTotalesRow() As RegistrosTotalesRow
            Return CType(Me.NewRow,RegistrosTotalesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RegistrosTotalesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RegistrosTotalesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RegistrosTotalesRowChangedEvent) Is Nothing) Then
                RaiseEvent RegistrosTotalesRowChanged(Me, New RegistrosTotalesRowChangeEvent(CType(e.Row,RegistrosTotalesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RegistrosTotalesRowChangingEvent) Is Nothing) Then
                RaiseEvent RegistrosTotalesRowChanging(Me, New RegistrosTotalesRowChangeEvent(CType(e.Row,RegistrosTotalesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RegistrosTotalesRowDeletedEvent) Is Nothing) Then
                RaiseEvent RegistrosTotalesRowDeleted(Me, New RegistrosTotalesRowChangeEvent(CType(e.Row,RegistrosTotalesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RegistrosTotalesRowDeletingEvent) Is Nothing) Then
                RaiseEvent RegistrosTotalesRowDeleting(Me, New RegistrosTotalesRowChangeEvent(CType(e.Row,RegistrosTotalesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveRegistrosTotalesRow(ByVal row As RegistrosTotalesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As Comedor_PacificoDataSet = New Comedor_PacificoDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RegistrosTotalesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RegistrosVDataTable
        Inherits Global.System.Data.TypedTableBase(Of RegistrosVRow)
        
        Private columnnRegistro As Global.System.Data.DataColumn
        
        Private columnClaveDia As Global.System.Data.DataColumn
        
        Private columnnCuenta As Global.System.Data.DataColumn
        
        Private columnMotivo As Global.System.Data.DataColumn
        
        Private columnMonto As Global.System.Data.DataColumn
        
        Private columnHora As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "RegistrosV"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property nRegistroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnRegistro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ClaveDiaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClaveDia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property nCuentaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnCuenta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property MotivoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMotivo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property MontoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property HoraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHora
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RegistrosVRow
            Get
                Return CType(Me.Rows(index),RegistrosVRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event RegistrosVRowChanging As RegistrosVRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event RegistrosVRowChanged As RegistrosVRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event RegistrosVRowDeleting As RegistrosVRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event RegistrosVRowDeleted As RegistrosVRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddRegistrosVRow(ByVal row As RegistrosVRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddRegistrosVRow(ByVal parentRegistrosGVRowByFK_RegistrosV_RegistrosGV As RegistrosGVRow, ByVal parentUsuariosComedorRowByFK_RegistrosV_UsuariosComedor As UsuariosComedorRow, ByVal Motivo As String, ByVal Monto As Integer, ByVal Hora As String) As RegistrosVRow
            Dim rowRegistrosVRow As RegistrosVRow = CType(Me.NewRow,RegistrosVRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, Nothing, Motivo, Monto, Hora}
            If (Not (parentRegistrosGVRowByFK_RegistrosV_RegistrosGV) Is Nothing) Then
                columnValuesArray(1) = parentRegistrosGVRowByFK_RegistrosV_RegistrosGV(0)
            End If
            If (Not (parentUsuariosComedorRowByFK_RegistrosV_UsuariosComedor) Is Nothing) Then
                columnValuesArray(2) = parentUsuariosComedorRowByFK_RegistrosV_UsuariosComedor(0)
            End If
            rowRegistrosVRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRegistrosVRow)
            Return rowRegistrosVRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindBynRegistro(ByVal nRegistro As Integer) As RegistrosVRow
            Return CType(Me.Rows.Find(New Object() {nRegistro}),RegistrosVRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RegistrosVDataTable = CType(MyBase.Clone,RegistrosVDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RegistrosVDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnnRegistro = MyBase.Columns("nRegistro")
            Me.columnClaveDia = MyBase.Columns("ClaveDia")
            Me.columnnCuenta = MyBase.Columns("nCuenta")
            Me.columnMotivo = MyBase.Columns("Motivo")
            Me.columnMonto = MyBase.Columns("Monto")
            Me.columnHora = MyBase.Columns("Hora")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnnRegistro = New Global.System.Data.DataColumn("nRegistro", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnRegistro)
            Me.columnClaveDia = New Global.System.Data.DataColumn("ClaveDia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClaveDia)
            Me.columnnCuenta = New Global.System.Data.DataColumn("nCuenta", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnCuenta)
            Me.columnMotivo = New Global.System.Data.DataColumn("Motivo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMotivo)
            Me.columnMonto = New Global.System.Data.DataColumn("Monto", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMonto)
            Me.columnHora = New Global.System.Data.DataColumn("Hora", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHora)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnnRegistro}, true))
            Me.columnnRegistro.AutoIncrement = true
            Me.columnnRegistro.AutoIncrementSeed = -1
            Me.columnnRegistro.AutoIncrementStep = -1
            Me.columnnRegistro.AllowDBNull = false
            Me.columnnRegistro.ReadOnly = true
            Me.columnnRegistro.Unique = true
            Me.columnClaveDia.AllowDBNull = false
            Me.columnClaveDia.MaxLength = 20
            Me.columnnCuenta.AllowDBNull = false
            Me.columnMotivo.AllowDBNull = false
            Me.columnMotivo.MaxLength = 50
            Me.columnMonto.AllowDBNull = false
            Me.columnHora.AllowDBNull = false
            Me.columnHora.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewRegistrosVRow() As RegistrosVRow
            Return CType(Me.NewRow,RegistrosVRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RegistrosVRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RegistrosVRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RegistrosVRowChangedEvent) Is Nothing) Then
                RaiseEvent RegistrosVRowChanged(Me, New RegistrosVRowChangeEvent(CType(e.Row,RegistrosVRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RegistrosVRowChangingEvent) Is Nothing) Then
                RaiseEvent RegistrosVRowChanging(Me, New RegistrosVRowChangeEvent(CType(e.Row,RegistrosVRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RegistrosVRowDeletedEvent) Is Nothing) Then
                RaiseEvent RegistrosVRowDeleted(Me, New RegistrosVRowChangeEvent(CType(e.Row,RegistrosVRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RegistrosVRowDeletingEvent) Is Nothing) Then
                RaiseEvent RegistrosVRowDeleting(Me, New RegistrosVRowChangeEvent(CType(e.Row,RegistrosVRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveRegistrosVRow(ByVal row As RegistrosVRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As Comedor_PacificoDataSet = New Comedor_PacificoDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RegistrosVDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class UsuariosComedorDataTable
        Inherits Global.System.Data.TypedTableBase(Of UsuariosComedorRow)
        
        Private columnnCuenta As Global.System.Data.DataColumn
        
        Private columnNombreUsuario As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnApellidos As Global.System.Data.DataColumn
        
        Private columnTelefono As Global.System.Data.DataColumn
        
        Private columnRol As Global.System.Data.DataColumn
        
        Private columnYear As Global.System.Data.DataColumn
        
        Private columnContrasena As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "UsuariosComedor"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property nCuentaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnCuenta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NombreUsuarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreUsuario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ApellidosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnApellidos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property TelefonoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelefono
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property RolColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRol
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property YearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ContrasenaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContrasena
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As UsuariosComedorRow
            Get
                Return CType(Me.Rows(index),UsuariosComedorRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event UsuariosComedorRowChanging As UsuariosComedorRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event UsuariosComedorRowChanged As UsuariosComedorRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event UsuariosComedorRowDeleting As UsuariosComedorRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event UsuariosComedorRowDeleted As UsuariosComedorRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddUsuariosComedorRow(ByVal row As UsuariosComedorRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddUsuariosComedorRow(ByVal NombreUsuario As String, ByVal Nombre As String, ByVal Apellidos As String, ByVal Telefono As String, ByVal Rol As String, ByVal Year As Integer, ByVal Contrasena As String) As UsuariosComedorRow
            Dim rowUsuariosComedorRow As UsuariosComedorRow = CType(Me.NewRow,UsuariosComedorRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, NombreUsuario, Nombre, Apellidos, Telefono, Rol, Year, Contrasena}
            rowUsuariosComedorRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowUsuariosComedorRow)
            Return rowUsuariosComedorRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindBynCuenta(ByVal nCuenta As Integer) As UsuariosComedorRow
            Return CType(Me.Rows.Find(New Object() {nCuenta}),UsuariosComedorRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As UsuariosComedorDataTable = CType(MyBase.Clone,UsuariosComedorDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New UsuariosComedorDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnnCuenta = MyBase.Columns("nCuenta")
            Me.columnNombreUsuario = MyBase.Columns("NombreUsuario")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnApellidos = MyBase.Columns("Apellidos")
            Me.columnTelefono = MyBase.Columns("Telefono")
            Me.columnRol = MyBase.Columns("Rol")
            Me.columnYear = MyBase.Columns("Year")
            Me.columnContrasena = MyBase.Columns("Contrasena")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnnCuenta = New Global.System.Data.DataColumn("nCuenta", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnCuenta)
            Me.columnNombreUsuario = New Global.System.Data.DataColumn("NombreUsuario", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreUsuario)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnApellidos = New Global.System.Data.DataColumn("Apellidos", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnApellidos)
            Me.columnTelefono = New Global.System.Data.DataColumn("Telefono", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelefono)
            Me.columnRol = New Global.System.Data.DataColumn("Rol", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRol)
            Me.columnYear = New Global.System.Data.DataColumn("Year", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYear)
            Me.columnContrasena = New Global.System.Data.DataColumn("Contrasena", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContrasena)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnnCuenta}, true))
            Me.columnnCuenta.AutoIncrement = true
            Me.columnnCuenta.AutoIncrementSeed = -1
            Me.columnnCuenta.AutoIncrementStep = -1
            Me.columnnCuenta.AllowDBNull = false
            Me.columnnCuenta.ReadOnly = true
            Me.columnnCuenta.Unique = true
            Me.columnNombreUsuario.AllowDBNull = false
            Me.columnNombreUsuario.MaxLength = 30
            Me.columnNombre.AllowDBNull = false
            Me.columnNombre.MaxLength = 50
            Me.columnApellidos.AllowDBNull = false
            Me.columnApellidos.MaxLength = 50
            Me.columnTelefono.MaxLength = 20
            Me.columnRol.AllowDBNull = false
            Me.columnRol.MaxLength = 20
            Me.columnYear.AllowDBNull = false
            Me.columnContrasena.AllowDBNull = false
            Me.columnContrasena.MaxLength = 30
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewUsuariosComedorRow() As UsuariosComedorRow
            Return CType(Me.NewRow,UsuariosComedorRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New UsuariosComedorRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(UsuariosComedorRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.UsuariosComedorRowChangedEvent) Is Nothing) Then
                RaiseEvent UsuariosComedorRowChanged(Me, New UsuariosComedorRowChangeEvent(CType(e.Row,UsuariosComedorRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.UsuariosComedorRowChangingEvent) Is Nothing) Then
                RaiseEvent UsuariosComedorRowChanging(Me, New UsuariosComedorRowChangeEvent(CType(e.Row,UsuariosComedorRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.UsuariosComedorRowDeletedEvent) Is Nothing) Then
                RaiseEvent UsuariosComedorRowDeleted(Me, New UsuariosComedorRowChangeEvent(CType(e.Row,UsuariosComedorRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.UsuariosComedorRowDeletingEvent) Is Nothing) Then
                RaiseEvent UsuariosComedorRowDeleting(Me, New UsuariosComedorRowChangeEvent(CType(e.Row,UsuariosComedorRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveUsuariosComedorRow(ByVal row As UsuariosComedorRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As Comedor_PacificoDataSet = New Comedor_PacificoDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "UsuariosComedorDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class ApuntesRow
        Inherits Global.System.Data.DataRow
        
        Private tableApuntes As ApuntesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableApuntes = CType(Me.Table,ApuntesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property nApunte() As Integer
            Get
                Return CType(Me(Me.tableApuntes.nApunteColumn),Integer)
            End Get
            Set
                Me(Me.tableApuntes.nApunteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property tApunte() As String
            Get
                Return CType(Me(Me.tableApuntes.tApunteColumn),String)
            End Get
            Set
                Me(Me.tableApuntes.tApunteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property nCuenta() As Integer
            Get
                Return CType(Me(Me.tableApuntes.nCuentaColumn),Integer)
            End Get
            Set
                Me(Me.tableApuntes.nCuentaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property Texto() As String
            Get
                Return CType(Me(Me.tableApuntes.TextoColumn),String)
            End Get
            Set
                Me(Me.tableApuntes.TextoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ParaTodos() As Integer
            Get
                Return CType(Me(Me.tableApuntes.ParaTodosColumn),Integer)
            End Get
            Set
                Me(Me.tableApuntes.ParaTodosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property UsuariosComedorRow() As UsuariosComedorRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Apuntes_UsuariosComedor")),UsuariosComedorRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Apuntes_UsuariosComedor"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class DistribuidoresRow
        Inherits Global.System.Data.DataRow
        
        Private tableDistribuidores As DistribuidoresDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDistribuidores = CType(Me.Table,DistribuidoresDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property nDistribuidor() As Integer
            Get
                Return CType(Me(Me.tableDistribuidores.nDistribuidorColumn),Integer)
            End Get
            Set
                Me(Me.tableDistribuidores.nDistribuidorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NombreDistribudor() As String
            Get
                Return CType(Me(Me.tableDistribuidores.NombreDistribudorColumn),String)
            End Get
            Set
                Me(Me.tableDistribuidores.NombreDistribudorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property DiasAsistencia() As String
            Get
                Return CType(Me(Me.tableDistribuidores.DiasAsistenciaColumn),String)
            End Get
            Set
                Me(Me.tableDistribuidores.DiasAsistenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property HoraAsistencia() As String
            Get
                Return CType(Me(Me.tableDistribuidores.HoraAsistenciaColumn),String)
            End Get
            Set
                Me(Me.tableDistribuidores.HoraAsistenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NombreEmpleado() As String
            Get
                Return CType(Me(Me.tableDistribuidores.NombreEmpleadoColumn),String)
            End Get
            Set
                Me(Me.tableDistribuidores.NombreEmpleadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NumeroTelefonico() As String
            Get
                Try 
                    Return CType(Me(Me.tableDistribuidores.NumeroTelefonicoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NumeroTelefonico' de la tabla 'Distribuidores' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableDistribuidores.NumeroTelefonicoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property MontoAprox() As Integer
            Get
                Return CType(Me(Me.tableDistribuidores.MontoAproxColumn),Integer)
            End Get
            Set
                Me(Me.tableDistribuidores.MontoAproxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property nCuenta() As Integer
            Get
                Return CType(Me(Me.tableDistribuidores.nCuentaColumn),Integer)
            End Get
            Set
                Me(Me.tableDistribuidores.nCuentaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property UsuariosComedorRow() As UsuariosComedorRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Distribuidores_UsuariosComedor")),UsuariosComedorRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Distribuidores_UsuariosComedor"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsNumeroTelefonicoNull() As Boolean
            Return Me.IsNull(Me.tableDistribuidores.NumeroTelefonicoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetNumeroTelefonicoNull()
            Me(Me.tableDistribuidores.NumeroTelefonicoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class RegCenasRow
        Inherits Global.System.Data.DataRow
        
        Private tableRegCenas As RegCenasDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRegCenas = CType(Me.Table,RegCenasDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClaveDia() As String
            Get
                Return CType(Me(Me.tableRegCenas.ClaveDiaColumn),String)
            End Get
            Set
                Me(Me.tableRegCenas.ClaveDiaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property nCuenta() As Integer
            Get
                Return CType(Me(Me.tableRegCenas.nCuentaColumn),Integer)
            End Get
            Set
                Me(Me.tableRegCenas.nCuentaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ECO() As Integer
            Get
                Return CType(Me(Me.tableRegCenas.ECOColumn),Integer)
            End Get
            Set
                Me(Me.tableRegCenas.ECOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property Laptop() As Integer
            Get
                Return CType(Me(Me.tableRegCenas.LaptopColumn),Integer)
            End Get
            Set
                Me(Me.tableRegCenas.LaptopColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property SinCredencial() As Integer
            Get
                Return CType(Me(Me.tableRegCenas.SinCredencialColumn),Integer)
            End Get
            Set
                Me(Me.tableRegCenas.SinCredencialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property PorProducto() As Integer
            Get
                Return CType(Me(Me.tableRegCenas.PorProductoColumn),Integer)
            End Get
            Set
                Me(Me.tableRegCenas.PorProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property tCenas() As Integer
            Get
                Return CType(Me(Me.tableRegCenas.tCenasColumn),Integer)
            End Get
            Set
                Me(Me.tableRegCenas.tCenasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property Hora() As String
            Get
                Return CType(Me(Me.tableRegCenas.HoraColumn),String)
            End Get
            Set
                Me(Me.tableRegCenas.HoraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property UsuariosComedorRow() As UsuariosComedorRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_RegCenas_UsuariosComedor")),UsuariosComedorRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_RegCenas_UsuariosComedor"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class RegComidasRow
        Inherits Global.System.Data.DataRow
        
        Private tableRegComidas As RegComidasDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRegComidas = CType(Me.Table,RegComidasDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClaveDia() As String
            Get
                Return CType(Me(Me.tableRegComidas.ClaveDiaColumn),String)
            End Get
            Set
                Me(Me.tableRegComidas.ClaveDiaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property nCuenta() As Integer
            Get
                Return CType(Me(Me.tableRegComidas.nCuentaColumn),Integer)
            End Get
            Set
                Me(Me.tableRegComidas.nCuentaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ECO() As Integer
            Get
                Return CType(Me(Me.tableRegComidas.ECOColumn),Integer)
            End Get
            Set
                Me(Me.tableRegComidas.ECOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property Laptop() As Integer
            Get
                Return CType(Me(Me.tableRegComidas.LaptopColumn),Integer)
            End Get
            Set
                Me(Me.tableRegComidas.LaptopColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property SinCredencial() As Integer
            Get
                Return CType(Me(Me.tableRegComidas.SinCredencialColumn),Integer)
            End Get
            Set
                Me(Me.tableRegComidas.SinCredencialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property PorProducto() As Integer
            Get
                Return CType(Me(Me.tableRegComidas.PorProductoColumn),Integer)
            End Get
            Set
                Me(Me.tableRegComidas.PorProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property tComidas() As Integer
            Get
                Return CType(Me(Me.tableRegComidas.tComidasColumn),Integer)
            End Get
            Set
                Me(Me.tableRegComidas.tComidasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property Hora() As String
            Get
                Return CType(Me(Me.tableRegComidas.HoraColumn),String)
            End Get
            Set
                Me(Me.tableRegComidas.HoraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property UsuariosComedorRow() As UsuariosComedorRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_RegComidas_UsuariosComedor")),UsuariosComedorRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_RegComidas_UsuariosComedor"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class RegDesayunosRow
        Inherits Global.System.Data.DataRow
        
        Private tableRegDesayunos As RegDesayunosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRegDesayunos = CType(Me.Table,RegDesayunosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClaveDia() As String
            Get
                Return CType(Me(Me.tableRegDesayunos.ClaveDiaColumn),String)
            End Get
            Set
                Me(Me.tableRegDesayunos.ClaveDiaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property nCuenta() As Integer
            Get
                Return CType(Me(Me.tableRegDesayunos.nCuentaColumn),Integer)
            End Get
            Set
                Me(Me.tableRegDesayunos.nCuentaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ECO() As Integer
            Get
                Return CType(Me(Me.tableRegDesayunos.ECOColumn),Integer)
            End Get
            Set
                Me(Me.tableRegDesayunos.ECOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property Laptop() As Integer
            Get
                Return CType(Me(Me.tableRegDesayunos.LaptopColumn),Integer)
            End Get
            Set
                Me(Me.tableRegDesayunos.LaptopColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property SinCredencial() As Integer
            Get
                Return CType(Me(Me.tableRegDesayunos.SinCredencialColumn),Integer)
            End Get
            Set
                Me(Me.tableRegDesayunos.SinCredencialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property PorProducto() As Integer
            Get
                Return CType(Me(Me.tableRegDesayunos.PorProductoColumn),Integer)
            End Get
            Set
                Me(Me.tableRegDesayunos.PorProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property tDesayunos() As Integer
            Get
                Return CType(Me(Me.tableRegDesayunos.tDesayunosColumn),Integer)
            End Get
            Set
                Me(Me.tableRegDesayunos.tDesayunosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property Hora() As String
            Get
                Return CType(Me(Me.tableRegDesayunos.HoraColumn),String)
            End Get
            Set
                Me(Me.tableRegDesayunos.HoraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property UsuariosComedorRow() As UsuariosComedorRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_RegDesayunos_UsuariosComedor")),UsuariosComedorRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_RegDesayunos_UsuariosComedor"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class RegistrosGRow
        Inherits Global.System.Data.DataRow
        
        Private tableRegistrosG As RegistrosGDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRegistrosG = CType(Me.Table,RegistrosGDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property nRegistro() As Integer
            Get
                Return CType(Me(Me.tableRegistrosG.nRegistroColumn),Integer)
            End Get
            Set
                Me(Me.tableRegistrosG.nRegistroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClaveDia() As String
            Get
                Return CType(Me(Me.tableRegistrosG.ClaveDiaColumn),String)
            End Get
            Set
                Me(Me.tableRegistrosG.ClaveDiaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property nCuenta() As Integer
            Get
                Return CType(Me(Me.tableRegistrosG.nCuentaColumn),Integer)
            End Get
            Set
                Me(Me.tableRegistrosG.nCuentaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property Motivo() As String
            Get
                Return CType(Me(Me.tableRegistrosG.MotivoColumn),String)
            End Get
            Set
                Me(Me.tableRegistrosG.MotivoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property Monto() As Integer
            Get
                Return CType(Me(Me.tableRegistrosG.MontoColumn),Integer)
            End Get
            Set
                Me(Me.tableRegistrosG.MontoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property Hora() As String
            Get
                Return CType(Me(Me.tableRegistrosG.HoraColumn),String)
            End Get
            Set
                Me(Me.tableRegistrosG.HoraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property RegistrosGVRow() As RegistrosGVRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_RegistrosGa_RegistrosGV")),RegistrosGVRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_RegistrosGa_RegistrosGV"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property UsuariosComedorRow() As UsuariosComedorRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_RegistrosGa_UsuariosComedor")),UsuariosComedorRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_RegistrosGa_UsuariosComedor"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class RegistrosGVRow
        Inherits Global.System.Data.DataRow
        
        Private tableRegistrosGV As RegistrosGVDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRegistrosGV = CType(Me.Table,RegistrosGVDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClaveDia() As String
            Get
                Return CType(Me(Me.tableRegistrosGV.ClaveDiaColumn),String)
            End Get
            Set
                Me(Me.tableRegistrosGV.ClaveDiaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property Dia() As String
            Get
                Return CType(Me(Me.tableRegistrosGV.DiaColumn),String)
            End Get
            Set
                Me(Me.tableRegistrosGV.DiaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property nomDia() As String
            Get
                Return CType(Me(Me.tableRegistrosGV.nomDiaColumn),String)
            End Get
            Set
                Me(Me.tableRegistrosGV.nomDiaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property tGasto() As Integer
            Get
                Return CType(Me(Me.tableRegistrosGV.tGastoColumn),Integer)
            End Get
            Set
                Me(Me.tableRegistrosGV.tGastoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property tVenta() As Integer
            Get
                Return CType(Me(Me.tableRegistrosGV.tVentaColumn),Integer)
            End Get
            Set
                Me(Me.tableRegistrosGV.tVentaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property Balance() As Integer
            Get
                Return CType(Me(Me.tableRegistrosGV.BalanceColumn),Integer)
            End Get
            Set
                Me(Me.tableRegistrosGV.BalanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetRegistrosGRows() As RegistrosGRow()
            If (Me.Table.ChildRelations("FK_RegistrosGa_RegistrosGV") Is Nothing) Then
                Return New RegistrosGRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_RegistrosGa_RegistrosGV")),RegistrosGRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetRegistrosVRows() As RegistrosVRow()
            If (Me.Table.ChildRelations("FK_RegistrosV_RegistrosGV") Is Nothing) Then
                Return New RegistrosVRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_RegistrosV_RegistrosGV")),RegistrosVRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class RegistrosTotalesRow
        Inherits Global.System.Data.DataRow
        
        Private tableRegistrosTotales As RegistrosTotalesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRegistrosTotales = CType(Me.Table,RegistrosTotalesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClaveDia() As String
            Get
                Return CType(Me(Me.tableRegistrosTotales.ClaveDiaColumn),String)
            End Get
            Set
                Me(Me.tableRegistrosTotales.ClaveDiaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property tEco() As Integer
            Get
                Return CType(Me(Me.tableRegistrosTotales.tEcoColumn),Integer)
            End Get
            Set
                Me(Me.tableRegistrosTotales.tEcoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property tLaptop() As Integer
            Get
                Return CType(Me(Me.tableRegistrosTotales.tLaptopColumn),Integer)
            End Get
            Set
                Me(Me.tableRegistrosTotales.tLaptopColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property tSinCredencial() As Integer
            Get
                Return CType(Me(Me.tableRegistrosTotales.tSinCredencialColumn),Integer)
            End Get
            Set
                Me(Me.tableRegistrosTotales.tSinCredencialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property tProducto() As Integer
            Get
                Return CType(Me(Me.tableRegistrosTotales.tProductoColumn),Integer)
            End Get
            Set
                Me(Me.tableRegistrosTotales.tProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property Total() As Long
            Get
                Return CType(Me(Me.tableRegistrosTotales.TotalColumn),Long)
            End Get
            Set
                Me(Me.tableRegistrosTotales.TotalColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class RegistrosVRow
        Inherits Global.System.Data.DataRow
        
        Private tableRegistrosV As RegistrosVDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRegistrosV = CType(Me.Table,RegistrosVDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property nRegistro() As Integer
            Get
                Return CType(Me(Me.tableRegistrosV.nRegistroColumn),Integer)
            End Get
            Set
                Me(Me.tableRegistrosV.nRegistroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClaveDia() As String
            Get
                Return CType(Me(Me.tableRegistrosV.ClaveDiaColumn),String)
            End Get
            Set
                Me(Me.tableRegistrosV.ClaveDiaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property nCuenta() As Integer
            Get
                Return CType(Me(Me.tableRegistrosV.nCuentaColumn),Integer)
            End Get
            Set
                Me(Me.tableRegistrosV.nCuentaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property Motivo() As String
            Get
                Return CType(Me(Me.tableRegistrosV.MotivoColumn),String)
            End Get
            Set
                Me(Me.tableRegistrosV.MotivoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property Monto() As Integer
            Get
                Return CType(Me(Me.tableRegistrosV.MontoColumn),Integer)
            End Get
            Set
                Me(Me.tableRegistrosV.MontoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property Hora() As String
            Get
                Return CType(Me(Me.tableRegistrosV.HoraColumn),String)
            End Get
            Set
                Me(Me.tableRegistrosV.HoraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property RegistrosGVRow() As RegistrosGVRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_RegistrosV_RegistrosGV")),RegistrosGVRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_RegistrosV_RegistrosGV"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property UsuariosComedorRow() As UsuariosComedorRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_RegistrosV_UsuariosComedor")),UsuariosComedorRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_RegistrosV_UsuariosComedor"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class UsuariosComedorRow
        Inherits Global.System.Data.DataRow
        
        Private tableUsuariosComedor As UsuariosComedorDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableUsuariosComedor = CType(Me.Table,UsuariosComedorDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property nCuenta() As Integer
            Get
                Return CType(Me(Me.tableUsuariosComedor.nCuentaColumn),Integer)
            End Get
            Set
                Me(Me.tableUsuariosComedor.nCuentaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NombreUsuario() As String
            Get
                Return CType(Me(Me.tableUsuariosComedor.NombreUsuarioColumn),String)
            End Get
            Set
                Me(Me.tableUsuariosComedor.NombreUsuarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property Nombre() As String
            Get
                Return CType(Me(Me.tableUsuariosComedor.NombreColumn),String)
            End Get
            Set
                Me(Me.tableUsuariosComedor.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property Apellidos() As String
            Get
                Return CType(Me(Me.tableUsuariosComedor.ApellidosColumn),String)
            End Get
            Set
                Me(Me.tableUsuariosComedor.ApellidosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property Telefono() As String
            Get
                Try 
                    Return CType(Me(Me.tableUsuariosComedor.TelefonoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Telefono' de la tabla 'UsuariosComedor' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUsuariosComedor.TelefonoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property Rol() As String
            Get
                Return CType(Me(Me.tableUsuariosComedor.RolColumn),String)
            End Get
            Set
                Me(Me.tableUsuariosComedor.RolColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property Year() As Integer
            Get
                Return CType(Me(Me.tableUsuariosComedor.YearColumn),Integer)
            End Get
            Set
                Me(Me.tableUsuariosComedor.YearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property Contrasena() As String
            Get
                Return CType(Me(Me.tableUsuariosComedor.ContrasenaColumn),String)
            End Get
            Set
                Me(Me.tableUsuariosComedor.ContrasenaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsTelefonoNull() As Boolean
            Return Me.IsNull(Me.tableUsuariosComedor.TelefonoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetTelefonoNull()
            Me(Me.tableUsuariosComedor.TelefonoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetApuntesRows() As ApuntesRow()
            If (Me.Table.ChildRelations("FK_Apuntes_UsuariosComedor") Is Nothing) Then
                Return New ApuntesRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Apuntes_UsuariosComedor")),ApuntesRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetDistribuidoresRows() As DistribuidoresRow()
            If (Me.Table.ChildRelations("FK_Distribuidores_UsuariosComedor") Is Nothing) Then
                Return New DistribuidoresRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Distribuidores_UsuariosComedor")),DistribuidoresRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetRegCenasRows() As RegCenasRow()
            If (Me.Table.ChildRelations("FK_RegCenas_UsuariosComedor") Is Nothing) Then
                Return New RegCenasRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_RegCenas_UsuariosComedor")),RegCenasRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetRegComidasRows() As RegComidasRow()
            If (Me.Table.ChildRelations("FK_RegComidas_UsuariosComedor") Is Nothing) Then
                Return New RegComidasRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_RegComidas_UsuariosComedor")),RegComidasRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetRegDesayunosRows() As RegDesayunosRow()
            If (Me.Table.ChildRelations("FK_RegDesayunos_UsuariosComedor") Is Nothing) Then
                Return New RegDesayunosRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_RegDesayunos_UsuariosComedor")),RegDesayunosRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetRegistrosGRows() As RegistrosGRow()
            If (Me.Table.ChildRelations("FK_RegistrosGa_UsuariosComedor") Is Nothing) Then
                Return New RegistrosGRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_RegistrosGa_UsuariosComedor")),RegistrosGRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetRegistrosVRows() As RegistrosVRow()
            If (Me.Table.ChildRelations("FK_RegistrosV_UsuariosComedor") Is Nothing) Then
                Return New RegistrosVRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_RegistrosV_UsuariosComedor")),RegistrosVRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class ApuntesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ApuntesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As ApuntesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As ApuntesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class DistribuidoresRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DistribuidoresRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As DistribuidoresRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As DistribuidoresRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class RegCenasRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RegCenasRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As RegCenasRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As RegCenasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class RegComidasRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RegComidasRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As RegComidasRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As RegComidasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class RegDesayunosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RegDesayunosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As RegDesayunosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As RegDesayunosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class RegistrosGRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RegistrosGRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As RegistrosGRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As RegistrosGRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class RegistrosGVRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RegistrosGVRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As RegistrosGVRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As RegistrosGVRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class RegistrosTotalesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RegistrosTotalesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As RegistrosTotalesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As RegistrosTotalesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class RegistrosVRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RegistrosVRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As RegistrosVRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As RegistrosVRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class UsuariosComedorRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As UsuariosComedorRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As UsuariosComedorRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As UsuariosComedorRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace Comedor_PacificoDataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ApuntesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Apuntes"
            tableMapping.ColumnMappings.Add("nApunte", "nApunte")
            tableMapping.ColumnMappings.Add("tApunte", "tApunte")
            tableMapping.ColumnMappings.Add("nCuenta", "nCuenta")
            tableMapping.ColumnMappings.Add("Texto", "Texto")
            tableMapping.ColumnMappings.Add("ParaTodos", "ParaTodos")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Apuntes] WHERE (([nApunte] = @Original_nApunte) AND ([tApunte]"& _ 
                " = @Original_tApunte) AND ([nCuenta] = @Original_nCuenta) AND ([ParaTodos] = @Or"& _ 
                "iginal_ParaTodos))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nApunte", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nApunte", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tApunte", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tApunte", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nCuenta", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nCuenta", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ParaTodos", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ParaTodos", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Apuntes] ([tApunte], [nCuenta], [Texto], [ParaTodos]) VALUES ("& _ 
                "@tApunte, @nCuenta, @Texto, @ParaTodos);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT nApunte, tApunte, nCuenta, Text"& _ 
                "o, ParaTodos FROM Apuntes WHERE (nApunte = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tApunte", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tApunte", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nCuenta", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nCuenta", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Texto", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Texto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ParaTodos", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ParaTodos", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Apuntes] SET [tApunte] = @tApunte, [nCuenta] = @nCuenta, [Texto] = "& _ 
                "@Texto, [ParaTodos] = @ParaTodos WHERE (([nApunte] = @Original_nApunte) AND ([tA"& _ 
                "punte] = @Original_tApunte) AND ([nCuenta] = @Original_nCuenta) AND ([ParaTodos]"& _ 
                " = @Original_ParaTodos));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT nApunte, tApunte, nCuenta, Texto, ParaTodos FR"& _ 
                "OM Apuntes WHERE (nApunte = @nApunte)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tApunte", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tApunte", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nCuenta", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nCuenta", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Texto", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Texto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ParaTodos", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ParaTodos", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nApunte", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nApunte", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tApunte", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tApunte", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nCuenta", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nCuenta", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ParaTodos", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ParaTodos", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nApunte", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "nApunte", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.ProyectoPOO.My.MySettings.Default.Comedor_PacificoConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(10) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT nApunte, tApunte, nCuenta, Texto, ParaTodos FROM dbo.Apuntes"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "UPDATE [dbo].[Apuntes] "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SET [tApunte] = @tApunte, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"[Texto] = @Texto, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"[ParaTod"& _ 
                "os] = @ParaTodos "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE [nApunte] = @Original_nApunte"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tApunte", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "tApunte", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Texto", Global.System.Data.SqlDbType.NText, 1073741823, Global.System.Data.ParameterDirection.Input, 0, 0, "Texto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ParaTodos", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ParaTodos", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nApunte", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "nApunte", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "INSERT INTO [dbo].[Apuntes] ([tApunte], [nCuenta], [Texto], [ParaTodos]) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"VALUES"& _ 
                " (@tApunte, @nCuenta, @Texto, @ParaTodos); "
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tApunte", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "tApunte", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nCuenta", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "nCuenta", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Texto", Global.System.Data.SqlDbType.NText, 1073741823, Global.System.Data.ParameterDirection.Input, 0, 0, "Texto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ParaTodos", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ParaTodos", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT MAX(nApunte) FROM Apuntes"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "DELETE FROM [dbo].[Apuntes] WHERE [nApunte] = @Parametro"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Parametro", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "nApunte", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(5) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(5).Connection = Me.Connection
            Me._commandCollection(5).CommandText = "SELECT nCuenta FROM Apuntes WHERE tApunte=@Parametro"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(5).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Parametro", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "tApunte", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(6).Connection = Me.Connection
            Me._commandCollection(6).CommandText = "SELECT nCuenta FROM Apuntes where nApunte=@Parametro"
            Me._commandCollection(6).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Parametro", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "nApunte", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(7) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(7).Connection = Me.Connection
            Me._commandCollection(7).CommandText = "SELECT ParaTodos FROM Apuntes WHERE nApunte=@Parametro"
            Me._commandCollection(7).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(7).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Parametro", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "nApunte", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(8) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(8).Connection = Me.Connection
            Me._commandCollection(8).CommandText = "SELECT Texto FROM Apuntes WHERE nApunte=@Parametro"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(8).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(8).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Parametro", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "nApunte", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(9) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(9).Connection = Me.Connection
            Me._commandCollection(9).CommandText = "SELECT tApunte FROM Apuntes WHERE nApunte=@Parametro"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(9).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(9).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Parametro", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "nApunte", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(10) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(10).Connection = Me.Connection
            Me._commandCollection(10).CommandText = "SELECT COUNT(*) FROM Apuntes"
            Me._commandCollection(10).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Comedor_PacificoDataSet.ApuntesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Comedor_PacificoDataSet.ApuntesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Comedor_PacificoDataSet.ApuntesDataTable = New Comedor_PacificoDataSet.ApuntesDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Comedor_PacificoDataSet.ApuntesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Comedor_PacificoDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Apuntes")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_nApunte As Integer, ByVal Original_tApunte As String, ByVal Original_nCuenta As Integer, ByVal Original_ParaTodos As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_nApunte,Integer)
            If (Original_tApunte Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tApunte")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_tApunte,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_nCuenta,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_ParaTodos,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal tApunte As String, ByVal nCuenta As Integer, ByVal Texto As String, ByVal ParaTodos As Integer) As Integer
            If (tApunte Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tApunte")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(tApunte,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(nCuenta,Integer)
            If (Texto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Texto")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Texto,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(ParaTodos,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal tApunte As String, ByVal nCuenta As Integer, ByVal Texto As String, ByVal ParaTodos As Integer, ByVal Original_nApunte As Integer, ByVal Original_tApunte As String, ByVal Original_nCuenta As Integer, ByVal Original_ParaTodos As Integer, ByVal nApunte As Integer) As Integer
            If (tApunte Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tApunte")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(tApunte,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(nCuenta,Integer)
            If (Texto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Texto")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Texto,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ParaTodos,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_nApunte,Integer)
            If (Original_tApunte Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tApunte")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_tApunte,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_nCuenta,Integer)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_ParaTodos,Integer)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(nApunte,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal tApunte As String, ByVal nCuenta As Integer, ByVal Texto As String, ByVal ParaTodos As Integer, ByVal Original_nApunte As Integer, ByVal Original_tApunte As String, ByVal Original_nCuenta As Integer, ByVal Original_ParaTodos As Integer) As Integer
            Return Me.Update(tApunte, nCuenta, Texto, ParaTodos, Original_nApunte, Original_tApunte, Original_nCuenta, Original_ParaTodos, Original_nApunte)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function ActualizarApunte(ByVal tApunte As String, ByVal Texto As String, ByVal ParaTodos As Integer, ByVal Original_nApunte As Integer) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            If (tApunte Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tApunte")
            Else
                command.Parameters(0).Value = CType(tApunte,String)
            End If
            If (Texto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Texto")
            Else
                command.Parameters(1).Value = CType(Texto,String)
            End If
            command.Parameters(2).Value = CType(ParaTodos,Integer)
            command.Parameters(3).Value = CType(Original_nApunte,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, false)>  _
        Public Overloads Overridable Function AltaApunte(ByVal tApunte As String, ByVal nCuenta As Integer, ByVal Texto As String, ByVal ParaTodos As Integer) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(2)
            If (tApunte Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tApunte")
            Else
                command.Parameters(0).Value = CType(tApunte,String)
            End If
            command.Parameters(1).Value = CType(nCuenta,Integer)
            If (Texto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Texto")
            Else
                command.Parameters(2).Value = CType(Texto,String)
            End If
            command.Parameters(3).Value = CType(ParaTodos,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function ApuntesPerdidos() As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(3)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)()
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, false)>  _
        Public Overloads Overridable Function BorrarApunte(ByVal Parametro As Integer) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(4)
            command.Parameters(0).Value = CType(Parametro,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function ExisteTitulo(ByVal Parametro As String) As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(5)
            If (Parametro Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Parametro")
            Else
                command.Parameters(0).Value = CType(Parametro,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)()
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function getAutor(ByVal Parametro As Integer) As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(6)
            command.Parameters(0).Value = CType(Parametro,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)()
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function getParaTodos(ByVal Parametro As Integer) As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(7)
            command.Parameters(0).Value = CType(Parametro,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)()
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function getTextoApunte(ByVal Parametro As Integer) As String
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(8)
            command.Parameters(0).Value = CType(Parametro,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,String)
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function getTitulo(ByVal Parametro As Integer) As String
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(9)
            command.Parameters(0).Value = CType(Parametro,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,String)
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function nApuntes() As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(10)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)()
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class DistribuidoresTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Distribuidores"
            tableMapping.ColumnMappings.Add("nDistribuidor", "nDistribuidor")
            tableMapping.ColumnMappings.Add("NombreDistribudor", "NombreDistribudor")
            tableMapping.ColumnMappings.Add("DiasAsistencia", "DiasAsistencia")
            tableMapping.ColumnMappings.Add("HoraAsistencia", "HoraAsistencia")
            tableMapping.ColumnMappings.Add("NombreEmpleado", "NombreEmpleado")
            tableMapping.ColumnMappings.Add("NumeroTelefonico", "NumeroTelefonico")
            tableMapping.ColumnMappings.Add("MontoAprox", "MontoAprox")
            tableMapping.ColumnMappings.Add("nCuenta", "nCuenta")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Distribuidores] WHERE (([nDistribuidor] = @Original_nDistribui"& _ 
                "dor) AND ([NombreDistribudor] = @Original_NombreDistribudor) AND ([DiasAsistenci"& _ 
                "a] = @Original_DiasAsistencia) AND ([HoraAsistencia] = @Original_HoraAsistencia)"& _ 
                " AND ([NombreEmpleado] = @Original_NombreEmpleado) AND ((@IsNull_NumeroTelefonic"& _ 
                "o = 1 AND [NumeroTelefonico] IS NULL) OR ([NumeroTelefonico] = @Original_NumeroT"& _ 
                "elefonico)) AND ([MontoAprox] = @Original_MontoAprox) AND ([nCuenta] = @Original"& _ 
                "_nCuenta))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nDistribuidor", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nDistribuidor", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NombreDistribudor", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NombreDistribudor", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DiasAsistencia", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DiasAsistencia", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_HoraAsistencia", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HoraAsistencia", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NombreEmpleado", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NombreEmpleado", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NumeroTelefonico", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NumeroTelefonico", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NumeroTelefonico", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NumeroTelefonico", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MontoAprox", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MontoAprox", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nCuenta", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nCuenta", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Distribuidores] ([NombreDistribudor], [DiasAsistencia], [HoraA"& _ 
                "sistencia], [NombreEmpleado], [NumeroTelefonico], [MontoAprox], [nCuenta]) VALUE"& _ 
                "S (@NombreDistribudor, @DiasAsistencia, @HoraAsistencia, @NombreEmpleado, @Numer"& _ 
                "oTelefonico, @MontoAprox, @nCuenta);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT nDistribuidor, NombreDistribudor, D"& _ 
                "iasAsistencia, HoraAsistencia, NombreEmpleado, NumeroTelefonico, MontoAprox, nCu"& _ 
                "enta FROM Distribuidores WHERE (nDistribuidor = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NombreDistribudor", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NombreDistribudor", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DiasAsistencia", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DiasAsistencia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HoraAsistencia", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HoraAsistencia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NombreEmpleado", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NombreEmpleado", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NumeroTelefonico", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NumeroTelefonico", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontoAprox", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MontoAprox", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nCuenta", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nCuenta", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Distribuidores] SET [NombreDistribudor] = @NombreDistribudor, [Dias"& _ 
                "Asistencia] = @DiasAsistencia, [HoraAsistencia] = @HoraAsistencia, [NombreEmplea"& _ 
                "do] = @NombreEmpleado, [NumeroTelefonico] = @NumeroTelefonico, [MontoAprox] = @M"& _ 
                "ontoAprox, [nCuenta] = @nCuenta WHERE (([nDistribuidor] = @Original_nDistribuido"& _ 
                "r) AND ([NombreDistribudor] = @Original_NombreDistribudor) AND ([DiasAsistencia]"& _ 
                " = @Original_DiasAsistencia) AND ([HoraAsistencia] = @Original_HoraAsistencia) A"& _ 
                "ND ([NombreEmpleado] = @Original_NombreEmpleado) AND ((@IsNull_NumeroTelefonico "& _ 
                "= 1 AND [NumeroTelefonico] IS NULL) OR ([NumeroTelefonico] = @Original_NumeroTel"& _ 
                "efonico)) AND ([MontoAprox] = @Original_MontoAprox) AND ([nCuenta] = @Original_n"& _ 
                "Cuenta));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT nDistribuidor, NombreDistribudor, DiasAsistencia, HoraAsistenc"& _ 
                "ia, NombreEmpleado, NumeroTelefonico, MontoAprox, nCuenta FROM Distribuidores WH"& _ 
                "ERE (nDistribuidor = @nDistribuidor)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NombreDistribudor", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NombreDistribudor", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DiasAsistencia", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DiasAsistencia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HoraAsistencia", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HoraAsistencia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NombreEmpleado", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NombreEmpleado", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NumeroTelefonico", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NumeroTelefonico", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontoAprox", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MontoAprox", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nCuenta", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nCuenta", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nDistribuidor", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nDistribuidor", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NombreDistribudor", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NombreDistribudor", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DiasAsistencia", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DiasAsistencia", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_HoraAsistencia", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HoraAsistencia", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NombreEmpleado", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NombreEmpleado", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NumeroTelefonico", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NumeroTelefonico", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NumeroTelefonico", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NumeroTelefonico", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MontoAprox", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MontoAprox", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nCuenta", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nCuenta", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nDistribuidor", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "nDistribuidor", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.ProyectoPOO.My.MySettings.Default.Comedor_PacificoConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(12) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT nDistribuidor, NombreDistribudor, DiasAsistencia, HoraAsistencia, NombreEm"& _ 
                "pleado, NumeroTelefonico, MontoAprox, nCuenta FROM dbo.Distribuidores"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "UPDATE [dbo].[Distribuidores] "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SET "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"[NombreDistribudor] = @NombreDistribudor, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"[DiasAsistencia] = @DiasAsistencia,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" [HoraAsistencia] = @HoraAsistencia, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"[No"& _ 
                "mbreEmpleado] = @NombreEmpleado,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" [NumeroTelefonico] = @NumeroTelefonico,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" [Mo"& _ 
                "ntoAprox] = @MontoAprox, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"[nCuenta] = @nCuenta "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE [nDistribuidor] = @Par"& _ 
                "ametro  "
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NombreDistribudor", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "NombreDistribudor", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DiasAsistencia", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "DiasAsistencia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HoraAsistencia", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "HoraAsistencia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NombreEmpleado", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "NombreEmpleado", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NumeroTelefonico", Global.System.Data.SqlDbType.NVarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "NumeroTelefonico", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontoAprox", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "MontoAprox", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nCuenta", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "nCuenta", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Parametro", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "nDistribuidor", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "INSERT INTO [dbo].[Distribuidores] ([NombreDistribudor], [DiasAsistencia], [HoraA"& _ 
                "sistencia], [NombreEmpleado], [NumeroTelefonico], [MontoAprox], [nCuenta]) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"VAL"& _ 
                "UES (@NombreDistribudor, @DiasAsistencia, @HoraAsistencia, @NombreEmpleado, @Num"& _ 
                "eroTelefonico, @MontoAprox, @nCuenta); "
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NombreDistribudor", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "NombreDistribudor", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DiasAsistencia", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "DiasAsistencia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HoraAsistencia", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "HoraAsistencia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NombreEmpleado", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "NombreEmpleado", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NumeroTelefonico", Global.System.Data.SqlDbType.NVarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "NumeroTelefonico", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MontoAprox", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "MontoAprox", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nCuenta", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "nCuenta", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "DELETE FROM [dbo].[Distribuidores] WHERE (nDistribuidor= @Parametro) "
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Parametro", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "nDistribuidor", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "SELECT nDistribuidor FROM Distribuidores WHERE NombreDistribudor= @Parametro"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Parametro", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "NombreDistribudor", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(5).Connection = Me.Connection
            Me._commandCollection(5).CommandText = "SELECT DiasAsistencia"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM Distribuidores "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE nDistribuidor=@Parametro"
            Me._commandCollection(5).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Parametro", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "nDistribuidor", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(6).Connection = Me.Connection
            Me._commandCollection(6).CommandText = "SELECT HoraAsistencia"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM Distribuidores "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE nDistribuidor=@Parametro"
            Me._commandCollection(6).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Parametro", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "nDistribuidor", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(7) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(7).Connection = Me.Connection
            Me._commandCollection(7).CommandText = "SELECT MontoAprox"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM Distribuidores "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE nDistribuidor=@Parametro"
            Me._commandCollection(7).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(7).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Parametro", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "nDistribuidor", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(8) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(8).Connection = Me.Connection
            Me._commandCollection(8).CommandText = "SELECT NombreDistribudor FROM Distribuidores WHERE nDistribuidor=@Parametro"
            Me._commandCollection(8).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(8).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Parametro", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "nDistribuidor", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(9) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(9).Connection = Me.Connection
            Me._commandCollection(9).CommandText = "SELECT NombreEmpleado FROM Distribuidores WHERE nDistribuidor=@Parametro"
            Me._commandCollection(9).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(9).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Parametro", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "nDistribuidor", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(10) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(10).Connection = Me.Connection
            Me._commandCollection(10).CommandText = "SELECT NumeroTelefonico "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM Distribuidores "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE nDistribuidor=@Parametro"
            Me._commandCollection(10).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(10).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Parametro", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "nDistribuidor", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(11) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(11).Connection = Me.Connection
            Me._commandCollection(11).CommandText = "SELECT COUNT(*) FROM Distribuidores"
            Me._commandCollection(11).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(12) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(12).Connection = Me.Connection
            Me._commandCollection(12).CommandText = "SELECT MAX(nDistribuidor) FROM Distribuidores"
            Me._commandCollection(12).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Comedor_PacificoDataSet.DistribuidoresDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Comedor_PacificoDataSet.DistribuidoresDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Comedor_PacificoDataSet.DistribuidoresDataTable = New Comedor_PacificoDataSet.DistribuidoresDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Comedor_PacificoDataSet.DistribuidoresDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Comedor_PacificoDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Distribuidores")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_nDistribuidor As Integer, ByVal Original_NombreDistribudor As String, ByVal Original_DiasAsistencia As String, ByVal Original_HoraAsistencia As String, ByVal Original_NombreEmpleado As String, ByVal Original_NumeroTelefonico As String, ByVal Original_MontoAprox As Integer, ByVal Original_nCuenta As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_nDistribuidor,Integer)
            If (Original_NombreDistribudor Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_NombreDistribudor")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_NombreDistribudor,String)
            End If
            If (Original_DiasAsistencia Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DiasAsistencia")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_DiasAsistencia,String)
            End If
            If (Original_HoraAsistencia Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_HoraAsistencia")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_HoraAsistencia,String)
            End If
            If (Original_NombreEmpleado Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_NombreEmpleado")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_NombreEmpleado,String)
            End If
            If (Original_NumeroTelefonico Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_NumeroTelefonico,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_MontoAprox,Integer)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_nCuenta,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal NombreDistribudor As String, ByVal DiasAsistencia As String, ByVal HoraAsistencia As String, ByVal NombreEmpleado As String, ByVal NumeroTelefonico As String, ByVal MontoAprox As Integer, ByVal nCuenta As Integer) As Integer
            If (NombreDistribudor Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NombreDistribudor")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(NombreDistribudor,String)
            End If
            If (DiasAsistencia Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DiasAsistencia")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(DiasAsistencia,String)
            End If
            If (HoraAsistencia Is Nothing) Then
                Throw New Global.System.ArgumentNullException("HoraAsistencia")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(HoraAsistencia,String)
            End If
            If (NombreEmpleado Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NombreEmpleado")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(NombreEmpleado,String)
            End If
            If (NumeroTelefonico Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(NumeroTelefonico,String)
            End If
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(MontoAprox,Integer)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(nCuenta,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal NombreDistribudor As String,  _
                    ByVal DiasAsistencia As String,  _
                    ByVal HoraAsistencia As String,  _
                    ByVal NombreEmpleado As String,  _
                    ByVal NumeroTelefonico As String,  _
                    ByVal MontoAprox As Integer,  _
                    ByVal nCuenta As Integer,  _
                    ByVal Original_nDistribuidor As Integer,  _
                    ByVal Original_NombreDistribudor As String,  _
                    ByVal Original_DiasAsistencia As String,  _
                    ByVal Original_HoraAsistencia As String,  _
                    ByVal Original_NombreEmpleado As String,  _
                    ByVal Original_NumeroTelefonico As String,  _
                    ByVal Original_MontoAprox As Integer,  _
                    ByVal Original_nCuenta As Integer,  _
                    ByVal nDistribuidor As Integer) As Integer
            If (NombreDistribudor Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NombreDistribudor")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(NombreDistribudor,String)
            End If
            If (DiasAsistencia Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DiasAsistencia")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(DiasAsistencia,String)
            End If
            If (HoraAsistencia Is Nothing) Then
                Throw New Global.System.ArgumentNullException("HoraAsistencia")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(HoraAsistencia,String)
            End If
            If (NombreEmpleado Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NombreEmpleado")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(NombreEmpleado,String)
            End If
            If (NumeroTelefonico Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(NumeroTelefonico,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(MontoAprox,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(nCuenta,Integer)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_nDistribuidor,Integer)
            If (Original_NombreDistribudor Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_NombreDistribudor")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_NombreDistribudor,String)
            End If
            If (Original_DiasAsistencia Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DiasAsistencia")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_DiasAsistencia,String)
            End If
            If (Original_HoraAsistencia Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_HoraAsistencia")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_HoraAsistencia,String)
            End If
            If (Original_NombreEmpleado Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_NombreEmpleado")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_NombreEmpleado,String)
            End If
            If (Original_NumeroTelefonico Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_NumeroTelefonico,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_MontoAprox,Integer)
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_nCuenta,Integer)
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(nDistribuidor,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal NombreDistribudor As String, ByVal DiasAsistencia As String, ByVal HoraAsistencia As String, ByVal NombreEmpleado As String, ByVal NumeroTelefonico As String, ByVal MontoAprox As Integer, ByVal nCuenta As Integer, ByVal Original_nDistribuidor As Integer, ByVal Original_NombreDistribudor As String, ByVal Original_DiasAsistencia As String, ByVal Original_HoraAsistencia As String, ByVal Original_NombreEmpleado As String, ByVal Original_NumeroTelefonico As String, ByVal Original_MontoAprox As Integer, ByVal Original_nCuenta As Integer) As Integer
            Return Me.Update(NombreDistribudor, DiasAsistencia, HoraAsistencia, NombreEmpleado, NumeroTelefonico, MontoAprox, nCuenta, Original_nDistribuidor, Original_NombreDistribudor, Original_DiasAsistencia, Original_HoraAsistencia, Original_NombreEmpleado, Original_NumeroTelefonico, Original_MontoAprox, Original_nCuenta, Original_nDistribuidor)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function ActualizarDistribuidor(ByVal NombreDistribudor As String, ByVal DiasAsistencia As String, ByVal HoraAsistencia As String, ByVal NombreEmpleado As String, ByVal NumeroTelefonico As String, ByVal MontoAprox As Integer, ByVal nCuenta As Integer, ByVal Parametro As Integer) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            If (NombreDistribudor Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NombreDistribudor")
            Else
                command.Parameters(0).Value = CType(NombreDistribudor,String)
            End If
            If (DiasAsistencia Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DiasAsistencia")
            Else
                command.Parameters(1).Value = CType(DiasAsistencia,String)
            End If
            If (HoraAsistencia Is Nothing) Then
                Throw New Global.System.ArgumentNullException("HoraAsistencia")
            Else
                command.Parameters(2).Value = CType(HoraAsistencia,String)
            End If
            If (NombreEmpleado Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NombreEmpleado")
            Else
                command.Parameters(3).Value = CType(NombreEmpleado,String)
            End If
            If (NumeroTelefonico Is Nothing) Then
                command.Parameters(4).Value = Global.System.DBNull.Value
            Else
                command.Parameters(4).Value = CType(NumeroTelefonico,String)
            End If
            command.Parameters(5).Value = CType(MontoAprox,Integer)
            command.Parameters(6).Value = CType(nCuenta,Integer)
            command.Parameters(7).Value = CType(Parametro,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, false)>  _
        Public Overloads Overridable Function AltaDistribuidor(ByVal NombreDistribudor As String, ByVal DiasAsistencia As String, ByVal HoraAsistencia As String, ByVal NombreEmpleado As String, ByVal NumeroTelefonico As String, ByVal MontoAprox As Integer, ByVal nCuenta As Integer) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(2)
            If (NombreDistribudor Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NombreDistribudor")
            Else
                command.Parameters(0).Value = CType(NombreDistribudor,String)
            End If
            If (DiasAsistencia Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DiasAsistencia")
            Else
                command.Parameters(1).Value = CType(DiasAsistencia,String)
            End If
            If (HoraAsistencia Is Nothing) Then
                Throw New Global.System.ArgumentNullException("HoraAsistencia")
            Else
                command.Parameters(2).Value = CType(HoraAsistencia,String)
            End If
            If (NombreEmpleado Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NombreEmpleado")
            Else
                command.Parameters(3).Value = CType(NombreEmpleado,String)
            End If
            If (NumeroTelefonico Is Nothing) Then
                command.Parameters(4).Value = Global.System.DBNull.Value
            Else
                command.Parameters(4).Value = CType(NumeroTelefonico,String)
            End If
            command.Parameters(5).Value = CType(MontoAprox,Integer)
            command.Parameters(6).Value = CType(nCuenta,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, false)>  _
        Public Overloads Overridable Function BorrarDistribuidor(ByVal Parametro As Integer) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(3)
            command.Parameters(0).Value = CType(Parametro,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function ExisteDistribudor(ByVal Parametro As String) As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(4)
            If (Parametro Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Parametro")
            Else
                command.Parameters(0).Value = CType(Parametro,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)()
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function getAsistencia(ByVal Parametro As Integer) As Object
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(5)
            command.Parameters(0).Value = CType(Parametro,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,Object)
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function getHoraAsistencia(ByVal Parametro As Integer) As String
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(6)
            command.Parameters(0).Value = CType(Parametro,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,String)
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function getMonto(ByVal Parametro As Integer) As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(7)
            command.Parameters(0).Value = CType(Parametro,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)()
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function getNombreDistribuidor(ByVal Parametro As Integer) As String
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(8)
            command.Parameters(0).Value = CType(Parametro,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,String)
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function getNombreEmpleado(ByVal Parametro As Integer) As String
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(9)
            command.Parameters(0).Value = CType(Parametro,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,String)
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function getNumeroTelefonico(ByVal Parametro As Integer) As String
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(10)
            command.Parameters(0).Value = CType(Parametro,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,String)
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function nDistribuidores() As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(11)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)()
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function PerdidaPaquete() As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(12)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)()
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class RegCenasTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "RegCenas"
            tableMapping.ColumnMappings.Add("ClaveDia", "ClaveDia")
            tableMapping.ColumnMappings.Add("nCuenta", "nCuenta")
            tableMapping.ColumnMappings.Add("ECO", "ECO")
            tableMapping.ColumnMappings.Add("Laptop", "Laptop")
            tableMapping.ColumnMappings.Add("SinCredencial", "SinCredencial")
            tableMapping.ColumnMappings.Add("PorProducto", "PorProducto")
            tableMapping.ColumnMappings.Add("tCenas", "tCenas")
            tableMapping.ColumnMappings.Add("Hora", "Hora")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[RegCenas] WHERE (([ClaveDia] = @Original_ClaveDia) AND ([nCuen"& _ 
                "ta] = @Original_nCuenta) AND ([ECO] = @Original_ECO) AND ([Laptop] = @Original_L"& _ 
                "aptop) AND ([SinCredencial] = @Original_SinCredencial) AND ([PorProducto] = @Ori"& _ 
                "ginal_PorProducto) AND ([tCenas] = @Original_tCenas) AND ([Hora] = @Original_Hor"& _ 
                "a))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ClaveDia", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClaveDia", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nCuenta", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nCuenta", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ECO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ECO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Laptop", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Laptop", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SinCredencial", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SinCredencial", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PorProducto", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PorProducto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tCenas", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tCenas", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Hora", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Hora", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[RegCenas] ([ClaveDia], [nCuenta], [ECO], [Laptop], [SinCredenc"& _ 
                "ial], [PorProducto], [tCenas], [Hora]) VALUES (@ClaveDia, @nCuenta, @ECO, @Lapto"& _ 
                "p, @SinCredencial, @PorProducto, @tCenas, @Hora);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ClaveDia, nCuenta, ECO"& _ 
                ", Laptop, SinCredencial, PorProducto, tCenas, Hora FROM RegCenas WHERE (ClaveDia"& _ 
                " = @ClaveDia)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClaveDia", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClaveDia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nCuenta", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nCuenta", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ECO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ECO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Laptop", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Laptop", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SinCredencial", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SinCredencial", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PorProducto", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PorProducto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tCenas", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tCenas", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Hora", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Hora", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[RegCenas] SET [ClaveDia] = @ClaveDia, [nCuenta] = @nCuenta, [ECO] ="& _ 
                " @ECO, [Laptop] = @Laptop, [SinCredencial] = @SinCredencial, [PorProducto] = @Po"& _ 
                "rProducto, [tCenas] = @tCenas, [Hora] = @Hora WHERE (([ClaveDia] = @Original_Cla"& _ 
                "veDia) AND ([nCuenta] = @Original_nCuenta) AND ([ECO] = @Original_ECO) AND ([Lap"& _ 
                "top] = @Original_Laptop) AND ([SinCredencial] = @Original_SinCredencial) AND ([P"& _ 
                "orProducto] = @Original_PorProducto) AND ([tCenas] = @Original_tCenas) AND ([Hor"& _ 
                "a] = @Original_Hora));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ClaveDia, nCuenta, ECO, Laptop, SinCredencial, Po"& _ 
                "rProducto, tCenas, Hora FROM RegCenas WHERE (ClaveDia = @ClaveDia)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClaveDia", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClaveDia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nCuenta", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nCuenta", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ECO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ECO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Laptop", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Laptop", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SinCredencial", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SinCredencial", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PorProducto", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PorProducto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tCenas", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tCenas", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Hora", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Hora", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ClaveDia", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClaveDia", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nCuenta", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nCuenta", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ECO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ECO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Laptop", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Laptop", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SinCredencial", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SinCredencial", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PorProducto", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PorProducto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tCenas", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tCenas", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Hora", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Hora", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.ProyectoPOO.My.MySettings.Default.Comedor_PacificoConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(3) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ClaveDia, nCuenta, ECO, Laptop, SinCredencial, PorProducto, tCenas, Hora F"& _ 
                "ROM dbo.RegCenas"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "INSERT INTO [dbo].[RegCenas] ([ClaveDia], [nCuenta], [ECO], [Laptop], [SinCredenc"& _ 
                "ial], [PorProducto], [tCenas], [Hora]) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"VALUES "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(@ClaveDia, @nCuenta, @ECO, @L"& _ 
                "aptop, @SinCredencial, @PorProducto, @tCenas, @Hora); "
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClaveDia", Global.System.Data.SqlDbType.NVarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "ClaveDia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nCuenta", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "nCuenta", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ECO", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ECO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Laptop", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Laptop", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SinCredencial", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "SinCredencial", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PorProducto", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "PorProducto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tCenas", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "tCenas", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Hora", Global.System.Data.SqlDbType.NVarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "Hora", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT nCuenta FROM RegCenas WHERE ClaveDia=@Parametro"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Parametro", Global.System.Data.SqlDbType.NVarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "ClaveDia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT ClaveDia, nCuenta, ECO, Laptop, SinCredencial, PorProducto, tCenas, Hora F"& _ 
                "ROM dbo.RegCenas "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Where ClaveDia = @Parametro"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Parametro", Global.System.Data.SqlDbType.NVarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "ClaveDia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Comedor_PacificoDataSet.RegCenasDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Comedor_PacificoDataSet.RegCenasDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Comedor_PacificoDataSet.RegCenasDataTable = New Comedor_PacificoDataSet.RegCenasDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function RellenaCenas(ByVal dataTable As Comedor_PacificoDataSet.RegCenasDataTable, ByVal Parametro As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (Parametro Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Parametro")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Parametro,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBy2(ByVal Parametro As String) As Comedor_PacificoDataSet.RegCenasDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (Parametro Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Parametro")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Parametro,String)
            End If
            Dim dataTable As Comedor_PacificoDataSet.RegCenasDataTable = New Comedor_PacificoDataSet.RegCenasDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Comedor_PacificoDataSet.RegCenasDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Comedor_PacificoDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "RegCenas")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ClaveDia As String, ByVal Original_nCuenta As Integer, ByVal Original_ECO As Integer, ByVal Original_Laptop As Integer, ByVal Original_SinCredencial As Integer, ByVal Original_PorProducto As Integer, ByVal Original_tCenas As Integer, ByVal Original_Hora As String) As Integer
            If (Original_ClaveDia Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ClaveDia")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ClaveDia,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_nCuenta,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ECO,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Laptop,Integer)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_SinCredencial,Integer)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_PorProducto,Integer)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_tCenas,Integer)
            If (Original_Hora Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Hora")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_Hora,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ClaveDia As String, ByVal nCuenta As Integer, ByVal ECO As Integer, ByVal Laptop As Integer, ByVal SinCredencial As Integer, ByVal PorProducto As Integer, ByVal tCenas As Integer, ByVal Hora As String) As Integer
            If (ClaveDia Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ClaveDia")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ClaveDia,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(nCuenta,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(ECO,Integer)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(Laptop,Integer)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(SinCredencial,Integer)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(PorProducto,Integer)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(tCenas,Integer)
            If (Hora Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Hora")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Hora,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ClaveDia As String,  _
                    ByVal nCuenta As Integer,  _
                    ByVal ECO As Integer,  _
                    ByVal Laptop As Integer,  _
                    ByVal SinCredencial As Integer,  _
                    ByVal PorProducto As Integer,  _
                    ByVal tCenas As Integer,  _
                    ByVal Hora As String,  _
                    ByVal Original_ClaveDia As String,  _
                    ByVal Original_nCuenta As Integer,  _
                    ByVal Original_ECO As Integer,  _
                    ByVal Original_Laptop As Integer,  _
                    ByVal Original_SinCredencial As Integer,  _
                    ByVal Original_PorProducto As Integer,  _
                    ByVal Original_tCenas As Integer,  _
                    ByVal Original_Hora As String) As Integer
            If (ClaveDia Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ClaveDia")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ClaveDia,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(nCuenta,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ECO,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Laptop,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(SinCredencial,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(PorProducto,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(tCenas,Integer)
            If (Hora Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Hora")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Hora,String)
            End If
            If (Original_ClaveDia Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ClaveDia")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_ClaveDia,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_nCuenta,Integer)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_ECO,Integer)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_Laptop,Integer)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_SinCredencial,Integer)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_PorProducto,Integer)
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_tCenas,Integer)
            If (Original_Hora Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Hora")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_Hora,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal nCuenta As Integer, ByVal ECO As Integer, ByVal Laptop As Integer, ByVal SinCredencial As Integer, ByVal PorProducto As Integer, ByVal tCenas As Integer, ByVal Hora As String, ByVal Original_ClaveDia As String, ByVal Original_nCuenta As Integer, ByVal Original_ECO As Integer, ByVal Original_Laptop As Integer, ByVal Original_SinCredencial As Integer, ByVal Original_PorProducto As Integer, ByVal Original_tCenas As Integer, ByVal Original_Hora As String) As Integer
            Return Me.Update(Original_ClaveDia, nCuenta, ECO, Laptop, SinCredencial, PorProducto, tCenas, Hora, Original_ClaveDia, Original_nCuenta, Original_ECO, Original_Laptop, Original_SinCredencial, Original_PorProducto, Original_tCenas, Original_Hora)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, false)>  _
        Public Overloads Overridable Function AltaCena(ByVal ClaveDia As String, ByVal nCuenta As Integer, ByVal ECO As Integer, ByVal Laptop As Integer, ByVal SinCredencial As Integer, ByVal PorProducto As Integer, ByVal tCenas As Integer, ByVal Hora As String) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            If (ClaveDia Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ClaveDia")
            Else
                command.Parameters(0).Value = CType(ClaveDia,String)
            End If
            command.Parameters(1).Value = CType(nCuenta,Integer)
            command.Parameters(2).Value = CType(ECO,Integer)
            command.Parameters(3).Value = CType(Laptop,Integer)
            command.Parameters(4).Value = CType(SinCredencial,Integer)
            command.Parameters(5).Value = CType(PorProducto,Integer)
            command.Parameters(6).Value = CType(tCenas,Integer)
            If (Hora Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Hora")
            Else
                command.Parameters(7).Value = CType(Hora,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function ExisteCena(ByVal Parametro As String) As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(2)
            If (Parametro Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Parametro")
            Else
                command.Parameters(0).Value = CType(Parametro,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)()
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class RegComidasTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "RegComidas"
            tableMapping.ColumnMappings.Add("ClaveDia", "ClaveDia")
            tableMapping.ColumnMappings.Add("nCuenta", "nCuenta")
            tableMapping.ColumnMappings.Add("ECO", "ECO")
            tableMapping.ColumnMappings.Add("Laptop", "Laptop")
            tableMapping.ColumnMappings.Add("SinCredencial", "SinCredencial")
            tableMapping.ColumnMappings.Add("PorProducto", "PorProducto")
            tableMapping.ColumnMappings.Add("tComidas", "tComidas")
            tableMapping.ColumnMappings.Add("Hora", "Hora")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[RegComidas] WHERE (([ClaveDia] = @Original_ClaveDia) AND ([nCu"& _ 
                "enta] = @Original_nCuenta) AND ([ECO] = @Original_ECO) AND ([Laptop] = @Original"& _ 
                "_Laptop) AND ([SinCredencial] = @Original_SinCredencial) AND ([PorProducto] = @O"& _ 
                "riginal_PorProducto) AND ([tComidas] = @Original_tComidas) AND ([Hora] = @Origin"& _ 
                "al_Hora))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ClaveDia", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClaveDia", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nCuenta", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nCuenta", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ECO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ECO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Laptop", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Laptop", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SinCredencial", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SinCredencial", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PorProducto", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PorProducto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tComidas", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tComidas", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Hora", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Hora", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[RegComidas] ([ClaveDia], [nCuenta], [ECO], [Laptop], [SinCrede"& _ 
                "ncial], [PorProducto], [tComidas], [Hora]) VALUES (@ClaveDia, @nCuenta, @ECO, @L"& _ 
                "aptop, @SinCredencial, @PorProducto, @tComidas, @Hora);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ClaveDia, nCuent"& _ 
                "a, ECO, Laptop, SinCredencial, PorProducto, tComidas, Hora FROM RegComidas WHERE"& _ 
                " (ClaveDia = @ClaveDia)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClaveDia", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClaveDia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nCuenta", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nCuenta", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ECO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ECO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Laptop", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Laptop", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SinCredencial", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SinCredencial", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PorProducto", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PorProducto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tComidas", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tComidas", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Hora", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Hora", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[RegComidas] SET [ClaveDia] = @ClaveDia, [nCuenta] = @nCuenta, [ECO]"& _ 
                " = @ECO, [Laptop] = @Laptop, [SinCredencial] = @SinCredencial, [PorProducto] = @"& _ 
                "PorProducto, [tComidas] = @tComidas, [Hora] = @Hora WHERE (([ClaveDia] = @Origin"& _ 
                "al_ClaveDia) AND ([nCuenta] = @Original_nCuenta) AND ([ECO] = @Original_ECO) AND"& _ 
                " ([Laptop] = @Original_Laptop) AND ([SinCredencial] = @Original_SinCredencial) A"& _ 
                "ND ([PorProducto] = @Original_PorProducto) AND ([tComidas] = @Original_tComidas)"& _ 
                " AND ([Hora] = @Original_Hora));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ClaveDia, nCuenta, ECO, Laptop, SinCred"& _ 
                "encial, PorProducto, tComidas, Hora FROM RegComidas WHERE (ClaveDia = @ClaveDia)"& _ 
                ""
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClaveDia", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClaveDia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nCuenta", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nCuenta", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ECO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ECO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Laptop", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Laptop", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SinCredencial", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SinCredencial", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PorProducto", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PorProducto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tComidas", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tComidas", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Hora", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Hora", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ClaveDia", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClaveDia", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nCuenta", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nCuenta", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ECO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ECO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Laptop", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Laptop", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SinCredencial", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SinCredencial", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PorProducto", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PorProducto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tComidas", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tComidas", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Hora", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Hora", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.ProyectoPOO.My.MySettings.Default.Comedor_PacificoConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(3) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ClaveDia, nCuenta, ECO, Laptop, SinCredencial, PorProducto, tComidas, Hora"& _ 
                " FROM dbo.RegComidas"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "INSERT INTO [dbo].[RegComidas] ([ClaveDia], [nCuenta], [ECO], [Laptop], [SinCrede"& _ 
                "ncial], [PorProducto], [tComidas], [Hora]) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"VALUES (@ClaveDia, @nCuenta, @ECO, "& _ 
                "@Laptop, @SinCredencial, @PorProducto, @tComidas, @Hora); "
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClaveDia", Global.System.Data.SqlDbType.NVarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "ClaveDia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nCuenta", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "nCuenta", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ECO", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ECO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Laptop", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Laptop", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SinCredencial", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "SinCredencial", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PorProducto", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "PorProducto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tComidas", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "tComidas", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Hora", Global.System.Data.SqlDbType.NVarChar, 30, Global.System.Data.ParameterDirection.Input, 0, 0, "Hora", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT nCuenta FROM RegComidas WHERE ClaveDia=@Parametro"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Parametro", Global.System.Data.SqlDbType.NVarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "ClaveDia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT ClaveDia, nCuenta, ECO, Laptop, SinCredencial, PorProducto, tComidas, Hora"& _ 
                " FROM dbo.RegComidas WHERE ClaveDia=@Parametro"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Parametro", Global.System.Data.SqlDbType.NVarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "ClaveDia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Comedor_PacificoDataSet.RegComidasDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Comedor_PacificoDataSet.RegComidasDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Comedor_PacificoDataSet.RegComidasDataTable = New Comedor_PacificoDataSet.RegComidasDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function RellenaComidas(ByVal dataTable As Comedor_PacificoDataSet.RegComidasDataTable, ByVal Parametro As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (Parametro Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Parametro")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Parametro,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBy2(ByVal Parametro As String) As Comedor_PacificoDataSet.RegComidasDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (Parametro Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Parametro")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Parametro,String)
            End If
            Dim dataTable As Comedor_PacificoDataSet.RegComidasDataTable = New Comedor_PacificoDataSet.RegComidasDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Comedor_PacificoDataSet.RegComidasDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Comedor_PacificoDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "RegComidas")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ClaveDia As String, ByVal Original_nCuenta As Integer, ByVal Original_ECO As Integer, ByVal Original_Laptop As Integer, ByVal Original_SinCredencial As Integer, ByVal Original_PorProducto As Integer, ByVal Original_tComidas As Integer, ByVal Original_Hora As String) As Integer
            If (Original_ClaveDia Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ClaveDia")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ClaveDia,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_nCuenta,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ECO,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Laptop,Integer)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_SinCredencial,Integer)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_PorProducto,Integer)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_tComidas,Integer)
            If (Original_Hora Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Hora")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_Hora,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ClaveDia As String, ByVal nCuenta As Integer, ByVal ECO As Integer, ByVal Laptop As Integer, ByVal SinCredencial As Integer, ByVal PorProducto As Integer, ByVal tComidas As Integer, ByVal Hora As String) As Integer
            If (ClaveDia Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ClaveDia")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ClaveDia,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(nCuenta,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(ECO,Integer)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(Laptop,Integer)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(SinCredencial,Integer)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(PorProducto,Integer)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(tComidas,Integer)
            If (Hora Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Hora")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Hora,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ClaveDia As String,  _
                    ByVal nCuenta As Integer,  _
                    ByVal ECO As Integer,  _
                    ByVal Laptop As Integer,  _
                    ByVal SinCredencial As Integer,  _
                    ByVal PorProducto As Integer,  _
                    ByVal tComidas As Integer,  _
                    ByVal Hora As String,  _
                    ByVal Original_ClaveDia As String,  _
                    ByVal Original_nCuenta As Integer,  _
                    ByVal Original_ECO As Integer,  _
                    ByVal Original_Laptop As Integer,  _
                    ByVal Original_SinCredencial As Integer,  _
                    ByVal Original_PorProducto As Integer,  _
                    ByVal Original_tComidas As Integer,  _
                    ByVal Original_Hora As String) As Integer
            If (ClaveDia Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ClaveDia")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ClaveDia,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(nCuenta,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ECO,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Laptop,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(SinCredencial,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(PorProducto,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(tComidas,Integer)
            If (Hora Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Hora")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Hora,String)
            End If
            If (Original_ClaveDia Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ClaveDia")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_ClaveDia,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_nCuenta,Integer)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_ECO,Integer)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_Laptop,Integer)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_SinCredencial,Integer)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_PorProducto,Integer)
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_tComidas,Integer)
            If (Original_Hora Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Hora")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_Hora,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal nCuenta As Integer, ByVal ECO As Integer, ByVal Laptop As Integer, ByVal SinCredencial As Integer, ByVal PorProducto As Integer, ByVal tComidas As Integer, ByVal Hora As String, ByVal Original_ClaveDia As String, ByVal Original_nCuenta As Integer, ByVal Original_ECO As Integer, ByVal Original_Laptop As Integer, ByVal Original_SinCredencial As Integer, ByVal Original_PorProducto As Integer, ByVal Original_tComidas As Integer, ByVal Original_Hora As String) As Integer
            Return Me.Update(Original_ClaveDia, nCuenta, ECO, Laptop, SinCredencial, PorProducto, tComidas, Hora, Original_ClaveDia, Original_nCuenta, Original_ECO, Original_Laptop, Original_SinCredencial, Original_PorProducto, Original_tComidas, Original_Hora)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, false)>  _
        Public Overloads Overridable Function AltaComida(ByVal ClaveDia As String, ByVal nCuenta As Integer, ByVal ECO As Integer, ByVal Laptop As Integer, ByVal SinCredencial As Integer, ByVal PorProducto As Integer, ByVal tComidas As Integer, ByVal Hora As String) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            If (ClaveDia Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ClaveDia")
            Else
                command.Parameters(0).Value = CType(ClaveDia,String)
            End If
            command.Parameters(1).Value = CType(nCuenta,Integer)
            command.Parameters(2).Value = CType(ECO,Integer)
            command.Parameters(3).Value = CType(Laptop,Integer)
            command.Parameters(4).Value = CType(SinCredencial,Integer)
            command.Parameters(5).Value = CType(PorProducto,Integer)
            command.Parameters(6).Value = CType(tComidas,Integer)
            If (Hora Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Hora")
            Else
                command.Parameters(7).Value = CType(Hora,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function ExisteComida(ByVal Parametro As String) As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(2)
            If (Parametro Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Parametro")
            Else
                command.Parameters(0).Value = CType(Parametro,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)()
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class RegDesayunosTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "RegDesayunos"
            tableMapping.ColumnMappings.Add("ClaveDia", "ClaveDia")
            tableMapping.ColumnMappings.Add("nCuenta", "nCuenta")
            tableMapping.ColumnMappings.Add("ECO", "ECO")
            tableMapping.ColumnMappings.Add("Laptop", "Laptop")
            tableMapping.ColumnMappings.Add("SinCredencial", "SinCredencial")
            tableMapping.ColumnMappings.Add("PorProducto", "PorProducto")
            tableMapping.ColumnMappings.Add("tDesayunos", "tDesayunos")
            tableMapping.ColumnMappings.Add("Hora", "Hora")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[RegDesayunos] WHERE (([ClaveDia] = @Original_ClaveDia) AND ([n"& _ 
                "Cuenta] = @Original_nCuenta) AND ([ECO] = @Original_ECO) AND ([Laptop] = @Origin"& _ 
                "al_Laptop) AND ([SinCredencial] = @Original_SinCredencial) AND ([PorProducto] = "& _ 
                "@Original_PorProducto) AND ([tDesayunos] = @Original_tDesayunos) AND ([Hora] = @"& _ 
                "Original_Hora))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ClaveDia", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClaveDia", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nCuenta", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nCuenta", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ECO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ECO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Laptop", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Laptop", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SinCredencial", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SinCredencial", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PorProducto", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PorProducto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tDesayunos", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tDesayunos", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Hora", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Hora", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[RegDesayunos] ([ClaveDia], [nCuenta], [ECO], [Laptop], [SinCre"& _ 
                "dencial], [PorProducto], [tDesayunos], [Hora]) VALUES (@ClaveDia, @nCuenta, @ECO"& _ 
                ", @Laptop, @SinCredencial, @PorProducto, @tDesayunos, @Hora);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ClaveDia, "& _ 
                "nCuenta, ECO, Laptop, SinCredencial, PorProducto, tDesayunos, Hora FROM RegDesay"& _ 
                "unos WHERE (ClaveDia = @ClaveDia)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClaveDia", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClaveDia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nCuenta", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nCuenta", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ECO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ECO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Laptop", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Laptop", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SinCredencial", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SinCredencial", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PorProducto", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PorProducto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tDesayunos", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tDesayunos", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Hora", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Hora", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[RegDesayunos] SET [ClaveDia] = @ClaveDia, [nCuenta] = @nCuenta, [EC"& _ 
                "O] = @ECO, [Laptop] = @Laptop, [SinCredencial] = @SinCredencial, [PorProducto] ="& _ 
                " @PorProducto, [tDesayunos] = @tDesayunos, [Hora] = @Hora WHERE (([ClaveDia] = @"& _ 
                "Original_ClaveDia) AND ([nCuenta] = @Original_nCuenta) AND ([ECO] = @Original_EC"& _ 
                "O) AND ([Laptop] = @Original_Laptop) AND ([SinCredencial] = @Original_SinCredenc"& _ 
                "ial) AND ([PorProducto] = @Original_PorProducto) AND ([tDesayunos] = @Original_t"& _ 
                "Desayunos) AND ([Hora] = @Original_Hora));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ClaveDia, nCuenta, ECO, Lapto"& _ 
                "p, SinCredencial, PorProducto, tDesayunos, Hora FROM RegDesayunos WHERE (ClaveDi"& _ 
                "a = @ClaveDia)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClaveDia", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClaveDia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nCuenta", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nCuenta", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ECO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ECO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Laptop", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Laptop", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SinCredencial", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SinCredencial", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PorProducto", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PorProducto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tDesayunos", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tDesayunos", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Hora", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Hora", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ClaveDia", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClaveDia", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nCuenta", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nCuenta", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ECO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ECO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Laptop", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Laptop", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SinCredencial", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SinCredencial", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PorProducto", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PorProducto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tDesayunos", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tDesayunos", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Hora", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Hora", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.ProyectoPOO.My.MySettings.Default.Comedor_PacificoConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(3) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ClaveDia, nCuenta, ECO, Laptop, SinCredencial, PorProducto, tDesayunos, Ho"& _ 
                "ra FROM dbo.RegDesayunos"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "INSERT INTO [dbo].[RegDesayunos] ([ClaveDia], [nCuenta], [ECO], [Laptop], [SinCre"& _ 
                "dencial], [PorProducto], [tDesayunos], [Hora])"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" VALUES "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(@ClaveDia, @nCuenta, "& _ 
                "@ECO, @Laptop, @SinCredencial, @PorProducto, @tDesayunos, @Hora); "
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClaveDia", Global.System.Data.SqlDbType.NVarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "ClaveDia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nCuenta", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "nCuenta", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ECO", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ECO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Laptop", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Laptop", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SinCredencial", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "SinCredencial", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PorProducto", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "PorProducto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tDesayunos", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "tDesayunos", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Hora", Global.System.Data.SqlDbType.NVarChar, 30, Global.System.Data.ParameterDirection.Input, 0, 0, "Hora", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT nCuenta FROM RegDesayunos WHERE ClaveDia=@Parametro"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Parametro", Global.System.Data.SqlDbType.NVarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "ClaveDia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT ClaveDia, nCuenta, ECO, Laptop, SinCredencial, PorProducto, tDesayunos, Ho"& _ 
                "ra FROM dbo.RegDesayunos WHERE ClaveDia=@Parametro"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Parametro", Global.System.Data.SqlDbType.NVarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "ClaveDia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Comedor_PacificoDataSet.RegDesayunosDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Comedor_PacificoDataSet.RegDesayunosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Comedor_PacificoDataSet.RegDesayunosDataTable = New Comedor_PacificoDataSet.RegDesayunosDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function RellenaDesayuno(ByVal dataTable As Comedor_PacificoDataSet.RegDesayunosDataTable, ByVal Parametro As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (Parametro Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Parametro")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Parametro,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBy2(ByVal Parametro As String) As Comedor_PacificoDataSet.RegDesayunosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (Parametro Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Parametro")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Parametro,String)
            End If
            Dim dataTable As Comedor_PacificoDataSet.RegDesayunosDataTable = New Comedor_PacificoDataSet.RegDesayunosDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Comedor_PacificoDataSet.RegDesayunosDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Comedor_PacificoDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "RegDesayunos")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ClaveDia As String, ByVal Original_nCuenta As Integer, ByVal Original_ECO As Integer, ByVal Original_Laptop As Integer, ByVal Original_SinCredencial As Integer, ByVal Original_PorProducto As Integer, ByVal Original_tDesayunos As Integer, ByVal Original_Hora As String) As Integer
            If (Original_ClaveDia Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ClaveDia")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ClaveDia,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_nCuenta,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ECO,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Laptop,Integer)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_SinCredencial,Integer)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_PorProducto,Integer)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_tDesayunos,Integer)
            If (Original_Hora Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Hora")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_Hora,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ClaveDia As String, ByVal nCuenta As Integer, ByVal ECO As Integer, ByVal Laptop As Integer, ByVal SinCredencial As Integer, ByVal PorProducto As Integer, ByVal tDesayunos As Integer, ByVal Hora As String) As Integer
            If (ClaveDia Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ClaveDia")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ClaveDia,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(nCuenta,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(ECO,Integer)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(Laptop,Integer)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(SinCredencial,Integer)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(PorProducto,Integer)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(tDesayunos,Integer)
            If (Hora Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Hora")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Hora,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ClaveDia As String,  _
                    ByVal nCuenta As Integer,  _
                    ByVal ECO As Integer,  _
                    ByVal Laptop As Integer,  _
                    ByVal SinCredencial As Integer,  _
                    ByVal PorProducto As Integer,  _
                    ByVal tDesayunos As Integer,  _
                    ByVal Hora As String,  _
                    ByVal Original_ClaveDia As String,  _
                    ByVal Original_nCuenta As Integer,  _
                    ByVal Original_ECO As Integer,  _
                    ByVal Original_Laptop As Integer,  _
                    ByVal Original_SinCredencial As Integer,  _
                    ByVal Original_PorProducto As Integer,  _
                    ByVal Original_tDesayunos As Integer,  _
                    ByVal Original_Hora As String) As Integer
            If (ClaveDia Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ClaveDia")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ClaveDia,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(nCuenta,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ECO,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Laptop,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(SinCredencial,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(PorProducto,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(tDesayunos,Integer)
            If (Hora Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Hora")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Hora,String)
            End If
            If (Original_ClaveDia Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ClaveDia")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_ClaveDia,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_nCuenta,Integer)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_ECO,Integer)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_Laptop,Integer)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_SinCredencial,Integer)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_PorProducto,Integer)
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_tDesayunos,Integer)
            If (Original_Hora Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Hora")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_Hora,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal nCuenta As Integer, ByVal ECO As Integer, ByVal Laptop As Integer, ByVal SinCredencial As Integer, ByVal PorProducto As Integer, ByVal tDesayunos As Integer, ByVal Hora As String, ByVal Original_ClaveDia As String, ByVal Original_nCuenta As Integer, ByVal Original_ECO As Integer, ByVal Original_Laptop As Integer, ByVal Original_SinCredencial As Integer, ByVal Original_PorProducto As Integer, ByVal Original_tDesayunos As Integer, ByVal Original_Hora As String) As Integer
            Return Me.Update(Original_ClaveDia, nCuenta, ECO, Laptop, SinCredencial, PorProducto, tDesayunos, Hora, Original_ClaveDia, Original_nCuenta, Original_ECO, Original_Laptop, Original_SinCredencial, Original_PorProducto, Original_tDesayunos, Original_Hora)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, false)>  _
        Public Overloads Overridable Function AltaDesayuno(ByVal ClaveDia As String, ByVal nCuenta As Integer, ByVal ECO As Integer, ByVal Laptop As Integer, ByVal SinCredencial As Integer, ByVal PorProducto As Integer, ByVal tDesayunos As Integer, ByVal Hora As String) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            If (ClaveDia Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ClaveDia")
            Else
                command.Parameters(0).Value = CType(ClaveDia,String)
            End If
            command.Parameters(1).Value = CType(nCuenta,Integer)
            command.Parameters(2).Value = CType(ECO,Integer)
            command.Parameters(3).Value = CType(Laptop,Integer)
            command.Parameters(4).Value = CType(SinCredencial,Integer)
            command.Parameters(5).Value = CType(PorProducto,Integer)
            command.Parameters(6).Value = CType(tDesayunos,Integer)
            If (Hora Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Hora")
            Else
                command.Parameters(7).Value = CType(Hora,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function ExisteDesayuno(ByVal Parametro As String) As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(2)
            If (Parametro Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Parametro")
            Else
                command.Parameters(0).Value = CType(Parametro,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)()
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class RegistrosGTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "RegistrosG"
            tableMapping.ColumnMappings.Add("nRegistro", "nRegistro")
            tableMapping.ColumnMappings.Add("ClaveDia", "ClaveDia")
            tableMapping.ColumnMappings.Add("nCuenta", "nCuenta")
            tableMapping.ColumnMappings.Add("Motivo", "Motivo")
            tableMapping.ColumnMappings.Add("Monto", "Monto")
            tableMapping.ColumnMappings.Add("Hora", "Hora")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[RegistrosG] WHERE (([nRegistro] = @Original_nRegistro) AND ([C"& _ 
                "laveDia] = @Original_ClaveDia) AND ([nCuenta] = @Original_nCuenta) AND ([Motivo]"& _ 
                " = @Original_Motivo) AND ([Monto] = @Original_Monto) AND ([Hora] = @Original_Hor"& _ 
                "a))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nRegistro", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nRegistro", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ClaveDia", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClaveDia", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nCuenta", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nCuenta", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Motivo", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Motivo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Monto", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Monto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Hora", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Hora", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[RegistrosG] ([ClaveDia], [nCuenta], [Motivo], [Monto], [Hora])"& _ 
                " VALUES (@ClaveDia, @nCuenta, @Motivo, @Monto, @Hora);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT nRegistro, ClaveD"& _ 
                "ia, nCuenta, Motivo, Monto, Hora FROM RegistrosG WHERE (nRegistro = SCOPE_IDENTI"& _ 
                "TY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClaveDia", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClaveDia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nCuenta", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nCuenta", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Motivo", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Motivo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Monto", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Monto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Hora", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Hora", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[RegistrosG] SET [ClaveDia] = @ClaveDia, [nCuenta] = @nCuenta, [Moti"& _ 
                "vo] = @Motivo, [Monto] = @Monto, [Hora] = @Hora WHERE (([nRegistro] = @Original_"& _ 
                "nRegistro) AND ([ClaveDia] = @Original_ClaveDia) AND ([nCuenta] = @Original_nCue"& _ 
                "nta) AND ([Motivo] = @Original_Motivo) AND ([Monto] = @Original_Monto) AND ([Hor"& _ 
                "a] = @Original_Hora));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT nRegistro, ClaveDia, nCuenta, Motivo, Monto, Hora"& _ 
                " FROM RegistrosG WHERE (nRegistro = @nRegistro)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClaveDia", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClaveDia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nCuenta", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nCuenta", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Motivo", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Motivo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Monto", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Monto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Hora", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Hora", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nRegistro", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nRegistro", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ClaveDia", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClaveDia", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nCuenta", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nCuenta", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Motivo", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Motivo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Monto", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Monto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Hora", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Hora", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nRegistro", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "nRegistro", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.ProyectoPOO.My.MySettings.Default.Comedor_PacificoConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(3) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT nRegistro, ClaveDia, nCuenta, Motivo, Monto, Hora FROM dbo.RegistrosG"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "INSERT INTO [dbo].[RegistrosG] ([ClaveDia], [nCuenta], [Motivo], [Monto], [Hora])"& _ 
                " "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"VALUES "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(@ClaveDia, @nCuenta, @Motivo, @Monto, @Hora); "
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClaveDia", Global.System.Data.SqlDbType.NVarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "ClaveDia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nCuenta", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "nCuenta", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Motivo", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "Motivo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Monto", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Monto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Hora", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "Hora", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT nRegistro, ClaveDia, nCuenta, Motivo, Monto, Hora FROM dbo.RegistrosG"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Whe"& _ 
                "re ClaveDia=@Parametro"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Parametro", Global.System.Data.SqlDbType.NVarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "ClaveDia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT COUNT(*) FROM RegistrosG "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE ClaveDia=@Parametro"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Parametro", Global.System.Data.SqlDbType.NVarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "ClaveDia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Comedor_PacificoDataSet.RegistrosGDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Comedor_PacificoDataSet.RegistrosGDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Comedor_PacificoDataSet.RegistrosGDataTable = New Comedor_PacificoDataSet.RegistrosGDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As Comedor_PacificoDataSet.RegistrosGDataTable, ByVal Parametro As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (Parametro Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Parametro")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Parametro,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBy1(ByVal Parametro As String) As Comedor_PacificoDataSet.RegistrosGDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (Parametro Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Parametro")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Parametro,String)
            End If
            Dim dataTable As Comedor_PacificoDataSet.RegistrosGDataTable = New Comedor_PacificoDataSet.RegistrosGDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Comedor_PacificoDataSet.RegistrosGDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Comedor_PacificoDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "RegistrosG")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_nRegistro As Integer, ByVal Original_ClaveDia As String, ByVal Original_nCuenta As Integer, ByVal Original_Motivo As String, ByVal Original_Monto As Integer, ByVal Original_Hora As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_nRegistro,Integer)
            If (Original_ClaveDia Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ClaveDia")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ClaveDia,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_nCuenta,Integer)
            If (Original_Motivo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Motivo")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Motivo,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Monto,Integer)
            If (Original_Hora Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Hora")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_Hora,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ClaveDia As String, ByVal nCuenta As Integer, ByVal Motivo As String, ByVal Monto As Integer, ByVal Hora As String) As Integer
            If (ClaveDia Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ClaveDia")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ClaveDia,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(nCuenta,Integer)
            If (Motivo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Motivo")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Motivo,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(Monto,Integer)
            If (Hora Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Hora")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Hora,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ClaveDia As String, ByVal nCuenta As Integer, ByVal Motivo As String, ByVal Monto As Integer, ByVal Hora As String, ByVal Original_nRegistro As Integer, ByVal Original_ClaveDia As String, ByVal Original_nCuenta As Integer, ByVal Original_Motivo As String, ByVal Original_Monto As Integer, ByVal Original_Hora As String, ByVal nRegistro As Integer) As Integer
            If (ClaveDia Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ClaveDia")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ClaveDia,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(nCuenta,Integer)
            If (Motivo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Motivo")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Motivo,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Monto,Integer)
            If (Hora Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Hora")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Hora,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_nRegistro,Integer)
            If (Original_ClaveDia Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ClaveDia")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_ClaveDia,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_nCuenta,Integer)
            If (Original_Motivo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Motivo")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_Motivo,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_Monto,Integer)
            If (Original_Hora Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Hora")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_Hora,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(nRegistro,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ClaveDia As String, ByVal nCuenta As Integer, ByVal Motivo As String, ByVal Monto As Integer, ByVal Hora As String, ByVal Original_nRegistro As Integer, ByVal Original_ClaveDia As String, ByVal Original_nCuenta As Integer, ByVal Original_Motivo As String, ByVal Original_Monto As Integer, ByVal Original_Hora As String) As Integer
            Return Me.Update(ClaveDia, nCuenta, Motivo, Monto, Hora, Original_nRegistro, Original_ClaveDia, Original_nCuenta, Original_Motivo, Original_Monto, Original_Hora, Original_nRegistro)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, false)>  _
        Public Overloads Overridable Function AltaGasto(ByVal ClaveDia As String, ByVal nCuenta As Integer, ByVal Motivo As String, ByVal Monto As Integer, ByVal Hora As String) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            If (ClaveDia Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ClaveDia")
            Else
                command.Parameters(0).Value = CType(ClaveDia,String)
            End If
            command.Parameters(1).Value = CType(nCuenta,Integer)
            If (Motivo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Motivo")
            Else
                command.Parameters(2).Value = CType(Motivo,String)
            End If
            command.Parameters(3).Value = CType(Monto,Integer)
            If (Hora Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Hora")
            Else
                command.Parameters(4).Value = CType(Hora,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function getRegistrosGastos(ByVal Parametro As String) As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(3)
            If (Parametro Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Parametro")
            Else
                command.Parameters(0).Value = CType(Parametro,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)()
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class RegistrosGVTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "RegistrosGV"
            tableMapping.ColumnMappings.Add("ClaveDia", "ClaveDia")
            tableMapping.ColumnMappings.Add("Dia", "Dia")
            tableMapping.ColumnMappings.Add("nomDia", "nomDia")
            tableMapping.ColumnMappings.Add("tGasto", "tGasto")
            tableMapping.ColumnMappings.Add("tVenta", "tVenta")
            tableMapping.ColumnMappings.Add("Balance", "Balance")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[RegistrosGV] WHERE (([ClaveDia] = @Original_ClaveDia) AND ([Di"& _ 
                "a] = @Original_Dia) AND ([nomDia] = @Original_nomDia) AND ([tGasto] = @Original_"& _ 
                "tGasto) AND ([tVenta] = @Original_tVenta) AND ([Balance] = @Original_Balance))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ClaveDia", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClaveDia", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Dia", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Dia", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nomDia", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nomDia", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tGasto", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tGasto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tVenta", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tVenta", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Balance", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Balance", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[RegistrosGV] ([ClaveDia], [Dia], [nomDia], [tGasto], [tVenta],"& _ 
                " [Balance]) VALUES (@ClaveDia, @Dia, @nomDia, @tGasto, @tVenta, @Balance);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELE"& _ 
                "CT ClaveDia, Dia, nomDia, tGasto, tVenta, Balance FROM RegistrosGV WHERE (ClaveD"& _ 
                "ia = @ClaveDia)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClaveDia", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClaveDia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Dia", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Dia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nomDia", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nomDia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tGasto", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tGasto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tVenta", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tVenta", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Balance", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Balance", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[RegistrosGV] SET [ClaveDia] = @ClaveDia, [Dia] = @Dia, [nomDia] = @"& _ 
                "nomDia, [tGasto] = @tGasto, [tVenta] = @tVenta, [Balance] = @Balance WHERE (([Cl"& _ 
                "aveDia] = @Original_ClaveDia) AND ([Dia] = @Original_Dia) AND ([nomDia] = @Origi"& _ 
                "nal_nomDia) AND ([tGasto] = @Original_tGasto) AND ([tVenta] = @Original_tVenta) "& _ 
                "AND ([Balance] = @Original_Balance));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ClaveDia, Dia, nomDia, tGasto, tVe"& _ 
                "nta, Balance FROM RegistrosGV WHERE (ClaveDia = @ClaveDia)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClaveDia", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClaveDia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Dia", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Dia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nomDia", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nomDia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tGasto", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tGasto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tVenta", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tVenta", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Balance", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Balance", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ClaveDia", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClaveDia", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Dia", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Dia", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nomDia", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nomDia", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tGasto", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tGasto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tVenta", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tVenta", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Balance", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Balance", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.ProyectoPOO.My.MySettings.Default.Comedor_PacificoConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(6) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ClaveDia, Dia, nomDia, tGasto, tVenta, Balance FROM dbo.RegistrosGV"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "UPDATE [dbo].[RegistrosGV] SET [tGasto] = @tGasto, [tVenta] = @tVenta, [Balance] "& _ 
                "= @Balance "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE ClaveDia=@Parametro"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tGasto", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "tGasto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tVenta", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "tVenta", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Balance", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Balance", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Parametro", Global.System.Data.SqlDbType.NVarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "ClaveDia", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT nomDia FROM RegistrosGV WHERE ClaveDia=@Parametro"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Parametro", Global.System.Data.SqlDbType.NVarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "ClaveDia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT        Balance"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            RegistrosGV"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (ClaveDia = @Par"& _ 
                "ametro)"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Parametro", Global.System.Data.SqlDbType.NVarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "ClaveDia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "SELECT tGasto FROM RegistrosGV Where ClaveDia=@Parametro"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Parametro", Global.System.Data.SqlDbType.NVarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "ClaveDia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(5).Connection = Me.Connection
            Me._commandCollection(5).CommandText = "SELECT tVenta FROM RegistrosGV where ClaveDia=@Parametro"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(5).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Parametro", Global.System.Data.SqlDbType.NVarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "ClaveDia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(6).Connection = Me.Connection
            Me._commandCollection(6).CommandText = "INSERT INTO [dbo].[RegistrosGV] ([ClaveDia], [Dia], [nomDia], [tGasto], [tVenta],"& _ 
                " [Balance]) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"VALUES "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(@ClaveDia, @Dia, @nomDia, @tGasto, @tVenta, @Balance); "
            Me._commandCollection(6).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClaveDia", Global.System.Data.SqlDbType.NVarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "ClaveDia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Dia", Global.System.Data.SqlDbType.NVarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Dia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nomDia", Global.System.Data.SqlDbType.NVarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "nomDia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tGasto", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "tGasto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tVenta", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "tVenta", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Balance", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Balance", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Comedor_PacificoDataSet.RegistrosGVDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Comedor_PacificoDataSet.RegistrosGVDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Comedor_PacificoDataSet.RegistrosGVDataTable = New Comedor_PacificoDataSet.RegistrosGVDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Comedor_PacificoDataSet.RegistrosGVDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Comedor_PacificoDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "RegistrosGV")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ClaveDia As String, ByVal Original_Dia As String, ByVal Original_nomDia As String, ByVal Original_tGasto As Integer, ByVal Original_tVenta As Integer, ByVal Original_Balance As Integer) As Integer
            If (Original_ClaveDia Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ClaveDia")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ClaveDia,String)
            End If
            If (Original_Dia Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Dia")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_Dia,String)
            End If
            If (Original_nomDia Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_nomDia")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_nomDia,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_tGasto,Integer)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_tVenta,Integer)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_Balance,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ClaveDia As String, ByVal Dia As String, ByVal nomDia As String, ByVal tGasto As Integer, ByVal tVenta As Integer, ByVal Balance As Integer) As Integer
            If (ClaveDia Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ClaveDia")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ClaveDia,String)
            End If
            If (Dia Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Dia")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Dia,String)
            End If
            If (nomDia Is Nothing) Then
                Throw New Global.System.ArgumentNullException("nomDia")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(nomDia,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(tGasto,Integer)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(tVenta,Integer)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(Balance,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ClaveDia As String, ByVal Dia As String, ByVal nomDia As String, ByVal tGasto As Integer, ByVal tVenta As Integer, ByVal Balance As Integer, ByVal Original_ClaveDia As String, ByVal Original_Dia As String, ByVal Original_nomDia As String, ByVal Original_tGasto As Integer, ByVal Original_tVenta As Integer, ByVal Original_Balance As Integer) As Integer
            If (ClaveDia Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ClaveDia")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ClaveDia,String)
            End If
            If (Dia Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Dia")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Dia,String)
            End If
            If (nomDia Is Nothing) Then
                Throw New Global.System.ArgumentNullException("nomDia")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(nomDia,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(tGasto,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(tVenta,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Balance,Integer)
            If (Original_ClaveDia Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ClaveDia")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_ClaveDia,String)
            End If
            If (Original_Dia Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Dia")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_Dia,String)
            End If
            If (Original_nomDia Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_nomDia")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_nomDia,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_tGasto,Integer)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_tVenta,Integer)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_Balance,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Dia As String, ByVal nomDia As String, ByVal tGasto As Integer, ByVal tVenta As Integer, ByVal Balance As Integer, ByVal Original_ClaveDia As String, ByVal Original_Dia As String, ByVal Original_nomDia As String, ByVal Original_tGasto As Integer, ByVal Original_tVenta As Integer, ByVal Original_Balance As Integer) As Integer
            Return Me.Update(Original_ClaveDia, Dia, nomDia, tGasto, tVenta, Balance, Original_ClaveDia, Original_Dia, Original_nomDia, Original_tGasto, Original_tVenta, Original_Balance)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function ActualizarDia(ByVal tGasto As Integer, ByVal tVenta As Integer, ByVal Balance As Integer, ByVal Parametro As String) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            command.Parameters(0).Value = CType(tGasto,Integer)
            command.Parameters(1).Value = CType(tVenta,Integer)
            command.Parameters(2).Value = CType(Balance,Integer)
            If (Parametro Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Parametro")
            Else
                command.Parameters(3).Value = CType(Parametro,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function ExisteDia(ByVal Parametro As String) As Object
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(2)
            If (Parametro Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Parametro")
            Else
                command.Parameters(0).Value = CType(Parametro,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,Object)
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function getBalance(ByVal Parametro As String) As Object
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(3)
            If (Parametro Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Parametro")
            Else
                command.Parameters(0).Value = CType(Parametro,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,Object)
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function getGasto(ByVal Parametro As String) As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(4)
            If (Parametro Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Parametro")
            Else
                command.Parameters(0).Value = CType(Parametro,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)()
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function getVenta(ByVal Parametro As String) As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(5)
            If (Parametro Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Parametro")
            Else
                command.Parameters(0).Value = CType(Parametro,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)()
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, false)>  _
        Public Overloads Overridable Function IniciarDia(ByVal ClaveDia As String, ByVal Dia As String, ByVal nomDia As String, ByVal tGasto As Integer, ByVal tVenta As Integer, ByVal Balance As Integer) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(6)
            If (ClaveDia Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ClaveDia")
            Else
                command.Parameters(0).Value = CType(ClaveDia,String)
            End If
            If (Dia Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Dia")
            Else
                command.Parameters(1).Value = CType(Dia,String)
            End If
            If (nomDia Is Nothing) Then
                Throw New Global.System.ArgumentNullException("nomDia")
            Else
                command.Parameters(2).Value = CType(nomDia,String)
            End If
            command.Parameters(3).Value = CType(tGasto,Integer)
            command.Parameters(4).Value = CType(tVenta,Integer)
            command.Parameters(5).Value = CType(Balance,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class RegistrosTotalesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "RegistrosTotales"
            tableMapping.ColumnMappings.Add("ClaveDia", "ClaveDia")
            tableMapping.ColumnMappings.Add("tEco", "tEco")
            tableMapping.ColumnMappings.Add("tLaptop", "tLaptop")
            tableMapping.ColumnMappings.Add("tSinCredencial", "tSinCredencial")
            tableMapping.ColumnMappings.Add("tProducto", "tProducto")
            tableMapping.ColumnMappings.Add("Total", "Total")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[RegistrosTotales] WHERE (([ClaveDia] = @Original_ClaveDia) AND"& _ 
                " ([tEco] = @Original_tEco) AND ([tLaptop] = @Original_tLaptop) AND ([tSinCredenc"& _ 
                "ial] = @Original_tSinCredencial) AND ([tProducto] = @Original_tProducto) AND ([T"& _ 
                "otal] = @Original_Total))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ClaveDia", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClaveDia", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tEco", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tEco", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tLaptop", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tLaptop", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tSinCredencial", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tSinCredencial", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tProducto", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tProducto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Total", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Total", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[RegistrosTotales] ([ClaveDia], [tEco], [tLaptop], [tSinCredenc"& _ 
                "ial], [tProducto], [Total]) VALUES (@ClaveDia, @tEco, @tLaptop, @tSinCredencial,"& _ 
                " @tProducto, @Total);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ClaveDia, tEco, tLaptop, tSinCredencial, tProducto"& _ 
                ", Total FROM RegistrosTotales WHERE (ClaveDia = @ClaveDia)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClaveDia", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClaveDia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tEco", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tEco", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tLaptop", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tLaptop", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tSinCredencial", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tSinCredencial", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tProducto", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tProducto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Total", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Total", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[RegistrosTotales] SET [ClaveDia] = @ClaveDia, [tEco] = @tEco, [tLap"& _ 
                "top] = @tLaptop, [tSinCredencial] = @tSinCredencial, [tProducto] = @tProducto, ["& _ 
                "Total] = @Total WHERE (([ClaveDia] = @Original_ClaveDia) AND ([tEco] = @Original"& _ 
                "_tEco) AND ([tLaptop] = @Original_tLaptop) AND ([tSinCredencial] = @Original_tSi"& _ 
                "nCredencial) AND ([tProducto] = @Original_tProducto) AND ([Total] = @Original_To"& _ 
                "tal));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ClaveDia, tEco, tLaptop, tSinCredencial, tProducto, Total FROM Re"& _ 
                "gistrosTotales WHERE (ClaveDia = @ClaveDia)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClaveDia", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClaveDia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tEco", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tEco", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tLaptop", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tLaptop", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tSinCredencial", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tSinCredencial", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tProducto", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tProducto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Total", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Total", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ClaveDia", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClaveDia", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tEco", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tEco", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tLaptop", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tLaptop", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tSinCredencial", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tSinCredencial", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tProducto", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tProducto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Total", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Total", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.ProyectoPOO.My.MySettings.Default.Comedor_PacificoConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(8) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ClaveDia, tEco, tLaptop, tSinCredencial, tProducto, Total FROM dbo.Registr"& _ 
                "osTotales"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "UPDATE [dbo].[RegistrosTotales] "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SET   "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"[tEco] = @tEco,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"[tLaptop] = @tLaptop"& _ 
                ", "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"[tSinCredencial] = @tSinCredencial,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"[tProducto] = @tProducto, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"[Total] = @"& _ 
                "Total "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE  ClaveDia=@Parametro"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tEco", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "tEco", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tLaptop", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "tLaptop", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tSinCredencial", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "tSinCredencial", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tProducto", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "tProducto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Total", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "Total", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Parametro", Global.System.Data.SqlDbType.NVarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "ClaveDia", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT tEco FROM RegistrosTotales WHERE ClaveDia =@Parametro"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Parametro", Global.System.Data.SqlDbType.NVarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "ClaveDia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT tLaptop FROM RegistrosTotales WHERE ClaveDia =@Parametro"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Parametro", Global.System.Data.SqlDbType.NVarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "ClaveDia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "SELECT tProducto FROM RegistrosTotales WHERE ClaveDia =@Parametro"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Parametro", Global.System.Data.SqlDbType.NVarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "ClaveDia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(5).Connection = Me.Connection
            Me._commandCollection(5).CommandText = "SELECT tSinCredencial FROM RegistrosTotales WHERE ClaveDia =@Parametro"
            Me._commandCollection(5).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Parametro", Global.System.Data.SqlDbType.NVarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "ClaveDia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(6).Connection = Me.Connection
            Me._commandCollection(6).CommandText = "SELECT Total FROM RegistrosTotales WHERE ClaveDia =@Parametro"
            Me._commandCollection(6).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Parametro", Global.System.Data.SqlDbType.NVarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "ClaveDia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(7) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(7).Connection = Me.Connection
            Me._commandCollection(7).CommandText = "INSERT INTO [dbo].[RegistrosTotales] ([ClaveDia], [tEco], [tLaptop], [tSinCredenc"& _ 
                "ial], [tProducto], [Total]) VALUES (@ClaveDia, 0, 0, 0, 0, 0); "
            Me._commandCollection(7).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(7).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClaveDia", Global.System.Data.SqlDbType.NVarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "ClaveDia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(8) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(8).Connection = Me.Connection
            Me._commandCollection(8).CommandText = "SELECT ClaveDia, tEco, tLaptop, tSinCredencial, tProducto, Total FROM dbo.Registr"& _ 
                "osTotales WHERE ClaveDia=@Parametros"
            Me._commandCollection(8).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(8).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Parametros", Global.System.Data.SqlDbType.NVarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "ClaveDia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Comedor_PacificoDataSet.RegistrosTotalesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Comedor_PacificoDataSet.RegistrosTotalesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Comedor_PacificoDataSet.RegistrosTotalesDataTable = New Comedor_PacificoDataSet.RegistrosTotalesDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function RellenaTotales(ByVal dataTable As Comedor_PacificoDataSet.RegistrosTotalesDataTable, ByVal Parametros As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(8)
            If (Parametros Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Parametros")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Parametros,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBy7(ByVal Parametros As String) As Comedor_PacificoDataSet.RegistrosTotalesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(8)
            If (Parametros Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Parametros")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Parametros,String)
            End If
            Dim dataTable As Comedor_PacificoDataSet.RegistrosTotalesDataTable = New Comedor_PacificoDataSet.RegistrosTotalesDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Comedor_PacificoDataSet.RegistrosTotalesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Comedor_PacificoDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "RegistrosTotales")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ClaveDia As String, ByVal Original_tEco As Integer, ByVal Original_tLaptop As Integer, ByVal Original_tSinCredencial As Integer, ByVal Original_tProducto As Integer, ByVal Original_Total As Long) As Integer
            If (Original_ClaveDia Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ClaveDia")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ClaveDia,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_tEco,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_tLaptop,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_tSinCredencial,Integer)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_tProducto,Integer)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_Total,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ClaveDia As String, ByVal tEco As Integer, ByVal tLaptop As Integer, ByVal tSinCredencial As Integer, ByVal tProducto As Integer, ByVal Total As Long) As Integer
            If (ClaveDia Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ClaveDia")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ClaveDia,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(tEco,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(tLaptop,Integer)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(tSinCredencial,Integer)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(tProducto,Integer)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(Total,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ClaveDia As String, ByVal tEco As Integer, ByVal tLaptop As Integer, ByVal tSinCredencial As Integer, ByVal tProducto As Integer, ByVal Total As Long, ByVal Original_ClaveDia As String, ByVal Original_tEco As Integer, ByVal Original_tLaptop As Integer, ByVal Original_tSinCredencial As Integer, ByVal Original_tProducto As Integer, ByVal Original_Total As Long) As Integer
            If (ClaveDia Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ClaveDia")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ClaveDia,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(tEco,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(tLaptop,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(tSinCredencial,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(tProducto,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Total,Long)
            If (Original_ClaveDia Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ClaveDia")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_ClaveDia,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_tEco,Integer)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_tLaptop,Integer)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_tSinCredencial,Integer)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_tProducto,Integer)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_Total,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal tEco As Integer, ByVal tLaptop As Integer, ByVal tSinCredencial As Integer, ByVal tProducto As Integer, ByVal Total As Long, ByVal Original_ClaveDia As String, ByVal Original_tEco As Integer, ByVal Original_tLaptop As Integer, ByVal Original_tSinCredencial As Integer, ByVal Original_tProducto As Integer, ByVal Original_Total As Long) As Integer
            Return Me.Update(Original_ClaveDia, tEco, tLaptop, tSinCredencial, tProducto, Total, Original_ClaveDia, Original_tEco, Original_tLaptop, Original_tSinCredencial, Original_tProducto, Original_Total)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function ActualizarDia(ByVal tEco As Integer, ByVal tLaptop As Integer, ByVal tSinCredencial As Integer, ByVal tProducto As Integer, ByVal Total As Long, ByVal Parametro As String) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            command.Parameters(0).Value = CType(tEco,Integer)
            command.Parameters(1).Value = CType(tLaptop,Integer)
            command.Parameters(2).Value = CType(tSinCredencial,Integer)
            command.Parameters(3).Value = CType(tProducto,Integer)
            command.Parameters(4).Value = CType(Total,Long)
            If (Parametro Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Parametro")
            Else
                command.Parameters(5).Value = CType(Parametro,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function getEco(ByVal Parametro As String) As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(2)
            If (Parametro Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Parametro")
            Else
                command.Parameters(0).Value = CType(Parametro,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)()
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function getLaptop(ByVal Parametro As String) As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(3)
            If (Parametro Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Parametro")
            Else
                command.Parameters(0).Value = CType(Parametro,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)()
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function getProducto(ByVal Parametro As String) As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(4)
            If (Parametro Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Parametro")
            Else
                command.Parameters(0).Value = CType(Parametro,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)()
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function getSinCredencial(ByVal Parametro As String) As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(5)
            If (Parametro Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Parametro")
            Else
                command.Parameters(0).Value = CType(Parametro,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)()
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function getTotal(ByVal Parametro As String) As Global.System.Nullable(Of Long)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(6)
            If (Parametro Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Parametro")
            Else
                command.Parameters(0).Value = CType(Parametro,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Long)()
            Else
                Return New Global.System.Nullable(Of Long)(CType(returnValue,Long))
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, false)>  _
        Public Overloads Overridable Function InicioDiaRegistros(ByVal ClaveDia As String) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(7)
            If (ClaveDia Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ClaveDia")
            Else
                command.Parameters(0).Value = CType(ClaveDia,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class RegistrosVTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "RegistrosV"
            tableMapping.ColumnMappings.Add("nRegistro", "nRegistro")
            tableMapping.ColumnMappings.Add("ClaveDia", "ClaveDia")
            tableMapping.ColumnMappings.Add("nCuenta", "nCuenta")
            tableMapping.ColumnMappings.Add("Motivo", "Motivo")
            tableMapping.ColumnMappings.Add("Monto", "Monto")
            tableMapping.ColumnMappings.Add("Hora", "Hora")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[RegistrosV] WHERE (([nRegistro] = @Original_nRegistro) AND ([C"& _ 
                "laveDia] = @Original_ClaveDia) AND ([nCuenta] = @Original_nCuenta) AND ([Motivo]"& _ 
                " = @Original_Motivo) AND ([Monto] = @Original_Monto) AND ([Hora] = @Original_Hor"& _ 
                "a))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nRegistro", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nRegistro", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ClaveDia", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClaveDia", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nCuenta", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nCuenta", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Motivo", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Motivo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Monto", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Monto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Hora", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Hora", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[RegistrosV] ([ClaveDia], [nCuenta], [Motivo], [Monto], [Hora])"& _ 
                " VALUES (@ClaveDia, @nCuenta, @Motivo, @Monto, @Hora);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT nRegistro, ClaveD"& _ 
                "ia, nCuenta, Motivo, Monto, Hora FROM RegistrosV WHERE (nRegistro = SCOPE_IDENTI"& _ 
                "TY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClaveDia", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClaveDia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nCuenta", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nCuenta", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Motivo", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Motivo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Monto", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Monto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Hora", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Hora", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[RegistrosV] SET [ClaveDia] = @ClaveDia, [nCuenta] = @nCuenta, [Moti"& _ 
                "vo] = @Motivo, [Monto] = @Monto, [Hora] = @Hora WHERE (([nRegistro] = @Original_"& _ 
                "nRegistro) AND ([ClaveDia] = @Original_ClaveDia) AND ([nCuenta] = @Original_nCue"& _ 
                "nta) AND ([Motivo] = @Original_Motivo) AND ([Monto] = @Original_Monto) AND ([Hor"& _ 
                "a] = @Original_Hora));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT nRegistro, ClaveDia, nCuenta, Motivo, Monto, Hora"& _ 
                " FROM RegistrosV WHERE (nRegistro = @nRegistro)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClaveDia", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClaveDia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nCuenta", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nCuenta", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Motivo", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Motivo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Monto", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Monto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Hora", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Hora", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nRegistro", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nRegistro", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ClaveDia", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClaveDia", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nCuenta", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nCuenta", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Motivo", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Motivo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Monto", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Monto", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Hora", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Hora", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nRegistro", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "nRegistro", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.ProyectoPOO.My.MySettings.Default.Comedor_PacificoConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(3) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT nRegistro, ClaveDia, nCuenta, Motivo, Monto, Hora FROM dbo.RegistrosV"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "INSERT INTO [dbo].[RegistrosV] ([ClaveDia], [nCuenta], [Motivo], [Monto], [Hora])"& _ 
                " "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"VALUES"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(@ClaveDia, @nCuenta, @Motivo, @Monto, @Hora); "
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClaveDia", Global.System.Data.SqlDbType.NVarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "ClaveDia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nCuenta", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "nCuenta", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Motivo", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "Motivo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Monto", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Monto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Hora", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "Hora", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT nRegistro, ClaveDia, nCuenta, Motivo, Monto, Hora FROM dbo.RegistrosV"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHE"& _ 
                "RE ClaveDia=@Parametro"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Parametro", Global.System.Data.SqlDbType.NVarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "ClaveDia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT COUNT(*) FROM RegistrosV Where ClaveDia=@Parametro"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Parametro", Global.System.Data.SqlDbType.NVarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "ClaveDia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Comedor_PacificoDataSet.RegistrosVDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Comedor_PacificoDataSet.RegistrosVDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Comedor_PacificoDataSet.RegistrosVDataTable = New Comedor_PacificoDataSet.RegistrosVDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As Comedor_PacificoDataSet.RegistrosVDataTable, ByVal Parametro As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (Parametro Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Parametro")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Parametro,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBy1(ByVal Parametro As String) As Comedor_PacificoDataSet.RegistrosVDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (Parametro Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Parametro")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Parametro,String)
            End If
            Dim dataTable As Comedor_PacificoDataSet.RegistrosVDataTable = New Comedor_PacificoDataSet.RegistrosVDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Comedor_PacificoDataSet.RegistrosVDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Comedor_PacificoDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "RegistrosV")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_nRegistro As Integer, ByVal Original_ClaveDia As String, ByVal Original_nCuenta As Integer, ByVal Original_Motivo As String, ByVal Original_Monto As Integer, ByVal Original_Hora As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_nRegistro,Integer)
            If (Original_ClaveDia Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ClaveDia")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ClaveDia,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_nCuenta,Integer)
            If (Original_Motivo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Motivo")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Motivo,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Monto,Integer)
            If (Original_Hora Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Hora")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_Hora,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ClaveDia As String, ByVal nCuenta As Integer, ByVal Motivo As String, ByVal Monto As Integer, ByVal Hora As String) As Integer
            If (ClaveDia Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ClaveDia")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ClaveDia,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(nCuenta,Integer)
            If (Motivo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Motivo")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Motivo,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(Monto,Integer)
            If (Hora Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Hora")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Hora,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ClaveDia As String, ByVal nCuenta As Integer, ByVal Motivo As String, ByVal Monto As Integer, ByVal Hora As String, ByVal Original_nRegistro As Integer, ByVal Original_ClaveDia As String, ByVal Original_nCuenta As Integer, ByVal Original_Motivo As String, ByVal Original_Monto As Integer, ByVal Original_Hora As String, ByVal nRegistro As Integer) As Integer
            If (ClaveDia Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ClaveDia")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ClaveDia,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(nCuenta,Integer)
            If (Motivo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Motivo")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Motivo,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Monto,Integer)
            If (Hora Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Hora")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Hora,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_nRegistro,Integer)
            If (Original_ClaveDia Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ClaveDia")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_ClaveDia,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_nCuenta,Integer)
            If (Original_Motivo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Motivo")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_Motivo,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_Monto,Integer)
            If (Original_Hora Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Hora")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_Hora,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(nRegistro,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ClaveDia As String, ByVal nCuenta As Integer, ByVal Motivo As String, ByVal Monto As Integer, ByVal Hora As String, ByVal Original_nRegistro As Integer, ByVal Original_ClaveDia As String, ByVal Original_nCuenta As Integer, ByVal Original_Motivo As String, ByVal Original_Monto As Integer, ByVal Original_Hora As String) As Integer
            Return Me.Update(ClaveDia, nCuenta, Motivo, Monto, Hora, Original_nRegistro, Original_ClaveDia, Original_nCuenta, Original_Motivo, Original_Monto, Original_Hora, Original_nRegistro)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, false)>  _
        Public Overloads Overridable Function AltaVenta(ByVal ClaveDia As String, ByVal nCuenta As Integer, ByVal Motivo As String, ByVal Monto As Integer, ByVal Hora As String) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            If (ClaveDia Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ClaveDia")
            Else
                command.Parameters(0).Value = CType(ClaveDia,String)
            End If
            command.Parameters(1).Value = CType(nCuenta,Integer)
            If (Motivo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Motivo")
            Else
                command.Parameters(2).Value = CType(Motivo,String)
            End If
            command.Parameters(3).Value = CType(Monto,Integer)
            If (Hora Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Hora")
            Else
                command.Parameters(4).Value = CType(Hora,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function getRegistrosVentas(ByVal Parametro As String) As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(3)
            If (Parametro Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Parametro")
            Else
                command.Parameters(0).Value = CType(Parametro,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)()
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class UsuariosComedorTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "UsuariosComedor"
            tableMapping.ColumnMappings.Add("nCuenta", "nCuenta")
            tableMapping.ColumnMappings.Add("NombreUsuario", "NombreUsuario")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            tableMapping.ColumnMappings.Add("Apellidos", "Apellidos")
            tableMapping.ColumnMappings.Add("Telefono", "Telefono")
            tableMapping.ColumnMappings.Add("Rol", "Rol")
            tableMapping.ColumnMappings.Add("Year", "Year")
            tableMapping.ColumnMappings.Add("Contrasena", "Contrasena")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[UsuariosComedor] WHERE (([nCuenta] = @Original_nCuenta) AND (["& _ 
                "NombreUsuario] = @Original_NombreUsuario) AND ([Nombre] = @Original_Nombre) AND "& _ 
                "([Apellidos] = @Original_Apellidos) AND ((@IsNull_Telefono = 1 AND [Telefono] IS"& _ 
                " NULL) OR ([Telefono] = @Original_Telefono)) AND ([Rol] = @Original_Rol) AND ([Y"& _ 
                "ear] = @Original_Year) AND ([Contrasena] = @Original_Contrasena))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nCuenta", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nCuenta", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NombreUsuario", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NombreUsuario", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Nombre", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nombre", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Apellidos", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Apellidos", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Telefono", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Telefono", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Telefono", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Telefono", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Rol", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Rol", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Year", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Year", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Contrasena", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Contrasena", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[UsuariosComedor] ([NombreUsuario], [Nombre], [Apellidos], [Tel"& _ 
                "efono], [Rol], [Year], [Contrasena]) VALUES (@NombreUsuario, @Nombre, @Apellidos"& _ 
                ", @Telefono, @Rol, @Year, @Contrasena);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT nCuenta, NombreUsuario, Nombre, "& _ 
                "Apellidos, Telefono, Rol, Year, Contrasena FROM UsuariosComedor WHERE (nCuenta ="& _ 
                " SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NombreUsuario", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NombreUsuario", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Nombre", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nombre", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Apellidos", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Apellidos", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Telefono", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Telefono", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Rol", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Rol", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Year", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Year", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Contrasena", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Contrasena", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[UsuariosComedor] SET [NombreUsuario] = @NombreUsuario, [Nombre] = @"& _ 
                "Nombre, [Apellidos] = @Apellidos, [Telefono] = @Telefono, [Rol] = @Rol, [Year] ="& _ 
                " @Year, [Contrasena] = @Contrasena WHERE (([nCuenta] = @Original_nCuenta) AND (["& _ 
                "NombreUsuario] = @Original_NombreUsuario) AND ([Nombre] = @Original_Nombre) AND "& _ 
                "([Apellidos] = @Original_Apellidos) AND ((@IsNull_Telefono = 1 AND [Telefono] IS"& _ 
                " NULL) OR ([Telefono] = @Original_Telefono)) AND ([Rol] = @Original_Rol) AND ([Y"& _ 
                "ear] = @Original_Year) AND ([Contrasena] = @Original_Contrasena));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT nCuen"& _ 
                "ta, NombreUsuario, Nombre, Apellidos, Telefono, Rol, Year, Contrasena FROM Usuar"& _ 
                "iosComedor WHERE (nCuenta = @nCuenta)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NombreUsuario", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NombreUsuario", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Nombre", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nombre", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Apellidos", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Apellidos", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Telefono", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Telefono", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Rol", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Rol", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Year", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Year", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Contrasena", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Contrasena", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nCuenta", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nCuenta", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NombreUsuario", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NombreUsuario", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Nombre", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nombre", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Apellidos", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Apellidos", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Telefono", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Telefono", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Telefono", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Telefono", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Rol", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Rol", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Year", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Year", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Contrasena", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Contrasena", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nCuenta", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "nCuenta", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.ProyectoPOO.My.MySettings.Default.Comedor_PacificoConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(4) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT nCuenta, NombreUsuario, Nombre, Apellidos, Telefono, Rol, Year, Contrasena"& _ 
                " FROM dbo.UsuariosComedor"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "INSERT INTO [dbo].[UsuariosComedor] ([NombreUsuario], [Nombre], [Apellidos], [Tel"& _ 
                "efono], [Rol], [Year], [Contrasena])"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" VALUES (@NombreUsuario, @Nombre, @Apellid"& _ 
                "os, @Telefono, @Rol, @Year, @Contrasena);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" "
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NombreUsuario", Global.System.Data.SqlDbType.NVarChar, 30, Global.System.Data.ParameterDirection.Input, 0, 0, "NombreUsuario", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Nombre", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "Nombre", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Apellidos", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "Apellidos", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Telefono", Global.System.Data.SqlDbType.NVarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "Telefono", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Rol", Global.System.Data.SqlDbType.NVarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "Rol", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Year", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Year", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Contrasena", Global.System.Data.SqlDbType.NVarChar, 30, Global.System.Data.ParameterDirection.Input, 0, 0, "Contrasena", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT        Contrasena"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            UsuariosComedor"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (NombreUs"& _ 
                "uario = @Parametro)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Parametro", Global.System.Data.SqlDbType.NVarChar, 30, Global.System.Data.ParameterDirection.Input, 0, 0, "NombreUsuario", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT nCuenta FROM UsuariosComedor WHERE NombreUsuario=@Parametro"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Parametro", Global.System.Data.SqlDbType.NVarChar, 30, Global.System.Data.ParameterDirection.Input, 0, 0, "NombreUsuario", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "SELECT Nombre FROM UsuariosComedor WHERE nCuenta=@Parametro"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Parametro", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "nCuenta", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Comedor_PacificoDataSet.UsuariosComedorDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Comedor_PacificoDataSet.UsuariosComedorDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Comedor_PacificoDataSet.UsuariosComedorDataTable = New Comedor_PacificoDataSet.UsuariosComedorDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Comedor_PacificoDataSet.UsuariosComedorDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Comedor_PacificoDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "UsuariosComedor")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_nCuenta As Integer, ByVal Original_NombreUsuario As String, ByVal Original_Nombre As String, ByVal Original_Apellidos As String, ByVal Original_Telefono As String, ByVal Original_Rol As String, ByVal Original_Year As Integer, ByVal Original_Contrasena As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_nCuenta,Integer)
            If (Original_NombreUsuario Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_NombreUsuario")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_NombreUsuario,String)
            End If
            If (Original_Nombre Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Nombre")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Nombre,String)
            End If
            If (Original_Apellidos Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Apellidos")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Apellidos,String)
            End If
            If (Original_Telefono Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_Telefono,String)
            End If
            If (Original_Rol Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Rol")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Rol,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_Year,Integer)
            If (Original_Contrasena Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Contrasena")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_Contrasena,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal NombreUsuario As String, ByVal Nombre As String, ByVal Apellidos As String, ByVal Telefono As String, ByVal Rol As String, ByVal Year As Integer, ByVal Contrasena As String) As Integer
            If (NombreUsuario Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NombreUsuario")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(NombreUsuario,String)
            End If
            If (Nombre Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Nombre")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Nombre,String)
            End If
            If (Apellidos Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Apellidos")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Apellidos,String)
            End If
            If (Telefono Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Telefono,String)
            End If
            If (Rol Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Rol")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Rol,String)
            End If
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(Year,Integer)
            If (Contrasena Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Contrasena")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Contrasena,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal NombreUsuario As String,  _
                    ByVal Nombre As String,  _
                    ByVal Apellidos As String,  _
                    ByVal Telefono As String,  _
                    ByVal Rol As String,  _
                    ByVal Year As Integer,  _
                    ByVal Contrasena As String,  _
                    ByVal Original_nCuenta As Integer,  _
                    ByVal Original_NombreUsuario As String,  _
                    ByVal Original_Nombre As String,  _
                    ByVal Original_Apellidos As String,  _
                    ByVal Original_Telefono As String,  _
                    ByVal Original_Rol As String,  _
                    ByVal Original_Year As Integer,  _
                    ByVal Original_Contrasena As String,  _
                    ByVal nCuenta As Integer) As Integer
            If (NombreUsuario Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NombreUsuario")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(NombreUsuario,String)
            End If
            If (Nombre Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Nombre")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Nombre,String)
            End If
            If (Apellidos Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Apellidos")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Apellidos,String)
            End If
            If (Telefono Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Telefono,String)
            End If
            If (Rol Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Rol")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Rol,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Year,Integer)
            If (Contrasena Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Contrasena")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Contrasena,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_nCuenta,Integer)
            If (Original_NombreUsuario Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_NombreUsuario")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_NombreUsuario,String)
            End If
            If (Original_Nombre Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Nombre")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_Nombre,String)
            End If
            If (Original_Apellidos Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Apellidos")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_Apellidos,String)
            End If
            If (Original_Telefono Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_Telefono,String)
            End If
            If (Original_Rol Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Rol")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_Rol,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_Year,Integer)
            If (Original_Contrasena Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Contrasena")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_Contrasena,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(nCuenta,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal NombreUsuario As String, ByVal Nombre As String, ByVal Apellidos As String, ByVal Telefono As String, ByVal Rol As String, ByVal Year As Integer, ByVal Contrasena As String, ByVal Original_nCuenta As Integer, ByVal Original_NombreUsuario As String, ByVal Original_Nombre As String, ByVal Original_Apellidos As String, ByVal Original_Telefono As String, ByVal Original_Rol As String, ByVal Original_Year As Integer, ByVal Original_Contrasena As String) As Integer
            Return Me.Update(NombreUsuario, Nombre, Apellidos, Telefono, Rol, Year, Contrasena, Original_nCuenta, Original_NombreUsuario, Original_Nombre, Original_Apellidos, Original_Telefono, Original_Rol, Original_Year, Original_Contrasena, Original_nCuenta)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, false)>  _
        Public Overloads Overridable Function AltaUsuarioComedor(ByVal NombreUsuario As String, ByVal Nombre As String, ByVal Apellidos As String, ByVal Telefono As String, ByVal Rol As String, ByVal Year As Integer, ByVal Contrasena As String) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            If (NombreUsuario Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NombreUsuario")
            Else
                command.Parameters(0).Value = CType(NombreUsuario,String)
            End If
            If (Nombre Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Nombre")
            Else
                command.Parameters(1).Value = CType(Nombre,String)
            End If
            If (Apellidos Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Apellidos")
            Else
                command.Parameters(2).Value = CType(Apellidos,String)
            End If
            If (Telefono Is Nothing) Then
                command.Parameters(3).Value = Global.System.DBNull.Value
            Else
                command.Parameters(3).Value = CType(Telefono,String)
            End If
            If (Rol Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Rol")
            Else
                command.Parameters(4).Value = CType(Rol,String)
            End If
            command.Parameters(5).Value = CType(Year,Integer)
            If (Contrasena Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Contrasena")
            Else
                command.Parameters(6).Value = CType(Contrasena,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function BuscarContrasena(ByVal Parametro As String) As String
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(2)
            If (Parametro Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Parametro")
            Else
                command.Parameters(0).Value = CType(Parametro,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,String)
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function BuscarUsuario(ByVal Parametro As String) As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(3)
            If (Parametro Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Parametro")
            Else
                command.Parameters(0).Value = CType(Parametro,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)()
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function getNombre(ByVal Parametro As Integer) As String
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(4)
            command.Parameters(0).Value = CType(Parametro,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,String)
            End If
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _apuntesTableAdapter As ApuntesTableAdapter
        
        Private _distribuidoresTableAdapter As DistribuidoresTableAdapter
        
        Private _regCenasTableAdapter As RegCenasTableAdapter
        
        Private _regComidasTableAdapter As RegComidasTableAdapter
        
        Private _regDesayunosTableAdapter As RegDesayunosTableAdapter
        
        Private _registrosGTableAdapter As RegistrosGTableAdapter
        
        Private _registrosGVTableAdapter As RegistrosGVTableAdapter
        
        Private _registrosTotalesTableAdapter As RegistrosTotalesTableAdapter
        
        Private _registrosVTableAdapter As RegistrosVTableAdapter
        
        Private _usuariosComedorTableAdapter As UsuariosComedorTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ApuntesTableAdapter() As ApuntesTableAdapter
            Get
                Return Me._apuntesTableAdapter
            End Get
            Set
                Me._apuntesTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property DistribuidoresTableAdapter() As DistribuidoresTableAdapter
            Get
                Return Me._distribuidoresTableAdapter
            End Get
            Set
                Me._distribuidoresTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property RegCenasTableAdapter() As RegCenasTableAdapter
            Get
                Return Me._regCenasTableAdapter
            End Get
            Set
                Me._regCenasTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property RegComidasTableAdapter() As RegComidasTableAdapter
            Get
                Return Me._regComidasTableAdapter
            End Get
            Set
                Me._regComidasTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property RegDesayunosTableAdapter() As RegDesayunosTableAdapter
            Get
                Return Me._regDesayunosTableAdapter
            End Get
            Set
                Me._regDesayunosTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property RegistrosGTableAdapter() As RegistrosGTableAdapter
            Get
                Return Me._registrosGTableAdapter
            End Get
            Set
                Me._registrosGTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property RegistrosGVTableAdapter() As RegistrosGVTableAdapter
            Get
                Return Me._registrosGVTableAdapter
            End Get
            Set
                Me._registrosGVTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property RegistrosTotalesTableAdapter() As RegistrosTotalesTableAdapter
            Get
                Return Me._registrosTotalesTableAdapter
            End Get
            Set
                Me._registrosTotalesTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property RegistrosVTableAdapter() As RegistrosVTableAdapter
            Get
                Return Me._registrosVTableAdapter
            End Get
            Set
                Me._registrosVTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property UsuariosComedorTableAdapter() As UsuariosComedorTableAdapter
            Get
                Return Me._usuariosComedorTableAdapter
            End Get
            Set
                Me._usuariosComedorTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._apuntesTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._apuntesTableAdapter.Connection) Is Nothing)) Then
                    Return Me._apuntesTableAdapter.Connection
                End If
                If ((Not (Me._distribuidoresTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._distribuidoresTableAdapter.Connection) Is Nothing)) Then
                    Return Me._distribuidoresTableAdapter.Connection
                End If
                If ((Not (Me._regCenasTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._regCenasTableAdapter.Connection) Is Nothing)) Then
                    Return Me._regCenasTableAdapter.Connection
                End If
                If ((Not (Me._regComidasTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._regComidasTableAdapter.Connection) Is Nothing)) Then
                    Return Me._regComidasTableAdapter.Connection
                End If
                If ((Not (Me._regDesayunosTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._regDesayunosTableAdapter.Connection) Is Nothing)) Then
                    Return Me._regDesayunosTableAdapter.Connection
                End If
                If ((Not (Me._registrosGTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._registrosGTableAdapter.Connection) Is Nothing)) Then
                    Return Me._registrosGTableAdapter.Connection
                End If
                If ((Not (Me._registrosGVTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._registrosGVTableAdapter.Connection) Is Nothing)) Then
                    Return Me._registrosGVTableAdapter.Connection
                End If
                If ((Not (Me._registrosTotalesTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._registrosTotalesTableAdapter.Connection) Is Nothing)) Then
                    Return Me._registrosTotalesTableAdapter.Connection
                End If
                If ((Not (Me._registrosVTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._registrosVTableAdapter.Connection) Is Nothing)) Then
                    Return Me._registrosVTableAdapter.Connection
                End If
                If ((Not (Me._usuariosComedorTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._usuariosComedorTableAdapter.Connection) Is Nothing)) Then
                    Return Me._usuariosComedorTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._apuntesTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._distribuidoresTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._regCenasTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._regComidasTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._regDesayunosTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._registrosGTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._registrosGVTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._registrosTotalesTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._registrosVTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._usuariosComedorTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As Comedor_PacificoDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._registrosGVTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.RegistrosGV.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._registrosGVTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._usuariosComedorTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.UsuariosComedor.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._usuariosComedorTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._apuntesTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Apuntes.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._apuntesTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._distribuidoresTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Distribuidores.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._distribuidoresTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._regCenasTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.RegCenas.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._regCenasTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._regComidasTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.RegComidas.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._regComidasTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._regDesayunosTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.RegDesayunos.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._regDesayunosTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._registrosGTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.RegistrosG.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._registrosGTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._registrosTotalesTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.RegistrosTotales.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._registrosTotalesTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._registrosVTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.RegistrosV.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._registrosVTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As Comedor_PacificoDataSet, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._registrosGVTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.RegistrosGV.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._registrosGVTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._usuariosComedorTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.UsuariosComedor.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._usuariosComedorTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._apuntesTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Apuntes.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._apuntesTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._distribuidoresTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Distribuidores.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._distribuidoresTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._regCenasTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.RegCenas.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._regCenasTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._regComidasTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.RegComidas.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._regComidasTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._regDesayunosTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.RegDesayunos.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._regDesayunosTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._registrosGTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.RegistrosG.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._registrosGTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._registrosTotalesTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.RegistrosTotales.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._registrosTotalesTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._registrosVTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.RegistrosV.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._registrosVTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As Comedor_PacificoDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._registrosVTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.RegistrosV.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._registrosVTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._registrosTotalesTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.RegistrosTotales.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._registrosTotalesTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._registrosGTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.RegistrosG.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._registrosGTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._regDesayunosTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.RegDesayunos.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._regDesayunosTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._regComidasTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.RegComidas.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._regComidasTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._regCenasTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.RegCenas.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._regCenasTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._distribuidoresTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Distribuidores.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._distribuidoresTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._apuntesTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Apuntes.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._apuntesTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._usuariosComedorTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.UsuariosComedor.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._usuariosComedorTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._registrosGVTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.RegistrosGV.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._registrosGVTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As Comedor_PacificoDataSet) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._apuntesTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._apuntesTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._distribuidoresTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._distribuidoresTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._regCenasTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._regCenasTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._regComidasTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._regComidasTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._regDesayunosTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._regDesayunosTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._registrosGTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._registrosGTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._registrosGVTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._registrosGVTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._registrosTotalesTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._registrosTotalesTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._registrosVTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._registrosVTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._usuariosComedorTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._usuariosComedorTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager no contiene información de conexión. Establezca cada propieda"& _ 
                        "d TableAdapterManager TableAdapter en una instancia TableAdapter válida.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("La transacción no puede comenzar. La conexión de datos actual no es compatible co"& _ 
                        "n las transacciones o el estado actual no permite que comience la transacción.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._apuntesTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._apuntesTableAdapter, Me._apuntesTableAdapter.Connection)
                    Me._apuntesTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._apuntesTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._apuntesTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._apuntesTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._apuntesTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._distribuidoresTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._distribuidoresTableAdapter, Me._distribuidoresTableAdapter.Connection)
                    Me._distribuidoresTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._distribuidoresTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._distribuidoresTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._distribuidoresTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._distribuidoresTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._regCenasTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._regCenasTableAdapter, Me._regCenasTableAdapter.Connection)
                    Me._regCenasTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._regCenasTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._regCenasTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._regCenasTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._regCenasTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._regComidasTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._regComidasTableAdapter, Me._regComidasTableAdapter.Connection)
                    Me._regComidasTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._regComidasTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._regComidasTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._regComidasTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._regComidasTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._regDesayunosTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._regDesayunosTableAdapter, Me._regDesayunosTableAdapter.Connection)
                    Me._regDesayunosTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._regDesayunosTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._regDesayunosTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._regDesayunosTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._regDesayunosTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._registrosGTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._registrosGTableAdapter, Me._registrosGTableAdapter.Connection)
                    Me._registrosGTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._registrosGTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._registrosGTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._registrosGTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._registrosGTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._registrosGVTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._registrosGVTableAdapter, Me._registrosGVTableAdapter.Connection)
                    Me._registrosGVTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._registrosGVTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._registrosGVTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._registrosGVTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._registrosGVTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._registrosTotalesTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._registrosTotalesTableAdapter, Me._registrosTotalesTableAdapter.Connection)
                    Me._registrosTotalesTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._registrosTotalesTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._registrosTotalesTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._registrosTotalesTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._registrosTotalesTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._registrosVTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._registrosVTableAdapter, Me._registrosVTableAdapter.Connection)
                    Me._registrosVTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._registrosVTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._registrosVTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._registrosVTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._registrosVTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._usuariosComedorTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._usuariosComedorTableAdapter, Me._usuariosComedorTableAdapter.Connection)
                    Me._usuariosComedorTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._usuariosComedorTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._usuariosComedorTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._usuariosComedorTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._usuariosComedorTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._apuntesTableAdapter) Is Nothing) Then
                    Me._apuntesTableAdapter.Connection = CType(revertConnections(Me._apuntesTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._apuntesTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._distribuidoresTableAdapter) Is Nothing) Then
                    Me._distribuidoresTableAdapter.Connection = CType(revertConnections(Me._distribuidoresTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._distribuidoresTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._regCenasTableAdapter) Is Nothing) Then
                    Me._regCenasTableAdapter.Connection = CType(revertConnections(Me._regCenasTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._regCenasTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._regComidasTableAdapter) Is Nothing) Then
                    Me._regComidasTableAdapter.Connection = CType(revertConnections(Me._regComidasTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._regComidasTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._regDesayunosTableAdapter) Is Nothing) Then
                    Me._regDesayunosTableAdapter.Connection = CType(revertConnections(Me._regDesayunosTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._regDesayunosTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._registrosGTableAdapter) Is Nothing) Then
                    Me._registrosGTableAdapter.Connection = CType(revertConnections(Me._registrosGTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._registrosGTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._registrosGVTableAdapter) Is Nothing) Then
                    Me._registrosGVTableAdapter.Connection = CType(revertConnections(Me._registrosGVTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._registrosGVTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._registrosTotalesTableAdapter) Is Nothing) Then
                    Me._registrosTotalesTableAdapter.Connection = CType(revertConnections(Me._registrosTotalesTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._registrosTotalesTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._registrosVTableAdapter) Is Nothing) Then
                    Me._registrosVTableAdapter.Connection = CType(revertConnections(Me._registrosVTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._registrosVTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._usuariosComedorTableAdapter) Is Nothing) Then
                    Me._usuariosComedorTableAdapter.Connection = CType(revertConnections(Me._usuariosComedorTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._usuariosComedorTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
